<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="402" height="600"
					   backgroundColor="0xfcffff"
					   creationComplete="initializeApp()">
	<fx:Script>
		<![CDATA[
			import components.acquisition.*;
			import components.action.*;
			import components.analysis.*;
			import components.exchange.*;
			import components.management.*;
			import components.modeling.*;
			import components.representation.*;
			
			import mx.collections.ArrayList;
			import mx.managers.PopUpManager;
			
			private var appModeller:Modeller;
			private var manWindow:Manager;
			private var repOperationWindow:Cartographer;
			private var editor:Editor;
			private var analysisWindow:Analyst;
			private var exchangeWindow:Exchanger;
			private var actionWindow:ActionWindow;
			
			private function initializeApp():void {
				this.move(0, 20);
				
				action0.visible 		= true;
				modeling0.visible 		= true;
				acquisition0.visible 	= true;
				analysis0.visible 		= true;
				management0.visible 	= true;
				exchange0.visible 		= true;
				representation0.visible	= true;
				
			}
			
			// Action Label Controls
			protected function actionLabel_clickHandler(event:MouseEvent):void
			{
				actionWindow = new ActionWindow();
				actionWindow.open();
				actionWindow.title = "gittok >";
				actionWindow.addEventListener(Event.CLOSE, actionWindowClose);
			}
			
			protected function actionWindowClose(event:Event):void {
				actionWindow = null;
				action0.visible = true;
				action1.visible = false;
			}			
			
			// Modeling Label Controls
			protected function modelingLabel_clickHandler(event:MouseEvent):void
			{
				appModeller = new Modeller();
				appModeller.open();
				appModeller.title = "gittok >";
				appModeller.addEventListener(Event.CLOSE, appModellerClose);
			}
			
			protected function appModellerClose(event:Event):void {
				if (appModeller.featureWindow != null) {
					appModeller.featureWindow.close();
				}
				if (appModeller.associationWindow != null) 	appModeller.associationWindow.close();
				
				appModeller = null;
				modeling0.visible = true;
				modeling1.visible = false;
			}
			
			// Acquisition Label  Controls
			protected function acquisitionLabel_clickHandler(event:MouseEvent):void
			{
				editor = new Editor();
				editor.open();
				editor.title = "gittok >";
				editor.addEventListener(Event.CLOSE, editorClose);
			}
			
			protected function editorClose(event:Event):void {
				if (editor.geometryWindow != null) editor.geometryWindow.close();
				if (editor.imageWindow 	  != null) editor.imageWindow.close();
				if (editor.videoWindow 	  != null) editor.videoWindow.close();
				if (editor.soundWindow 	  != null) editor.soundWindow.close();
				if (editor.urlWindow 	  != null) editor.urlWindow.close();
				if (editor.addressWindow  != null) editor.addressWindow.close();
				if (editor.crsEditor	  != null) editor.crsEditor.close();
				if (editor.memoWindow     != null) editor.memoWindow.close();
				if (editor.fromListWindow != null) editor.fromListWindow.close();
				if (editor.toListWindow	  != null) editor.toListWindow.close();
				
				editor = null;
				acquisition0.visible = true;
				acquisition1.visible = false;
			}
			
			// Analysis LabelControls
			protected function analysisLabel_clickHandler(event:MouseEvent):void
			{
				analysisWindow = new Analyst;
				analysisWindow.open();
				analysisWindow.title = "gittok >";
				analysisWindow.addEventListener(Event.CLOSE, analysisWindowClose);
			}
			
			protected function analysisWindowClose(event:Event):void {
				analysisWindow = null;
				analysis0.visible = true;
				analysis1.visible = false;
			}			
			
			// Management Label Conctrols
			protected function managementLabel_clickHandler(event:MouseEvent):void
			{
				manWindow = new Manager();
				manWindow.open();
				manWindow.title = "gittok >";
				manWindow.addEventListener(Event.CLOSE, managementWindowClose);
			}
			
			protected function managementWindowClose(event:Event):void {
				manWindow = null;
				management0.visible = true;
				management1.visible = false;	
			}
			
			// Exchange label controls
			protected function exchangeLabel_clickHandler(event:MouseEvent):void
			{
				exchangeWindow = new Exchanger();
				exchangeWindow.open();
				exchangeWindow.title = "gittok >";
				exchangeWindow.addEventListener(Event.CLOSE, exchangeWindowClose);
			}
			
			protected function exchangeWindowClose(event:Event):void {
				exchangeWindow = null;
				exchange0.visible = true;
				exchange1.visible = false;
			}
			
			// Representation Label Controls
			protected function representationLabel_clickHandler(event:MouseEvent):void
			{
				repOperationWindow = new Cartographer();
				repOperationWindow.open();
				repOperationWindow.title = "gittok >";
				repOperationWindow.addEventListener(Event.CLOSE, repOperationWindowClose);
			}
			
			protected function repOperationWindowClose(event:Event):void {
				if (repOperationWindow.symbolDesigner 		!= null) repOperationWindow.symbolDesigner.close(); 
				if (repOperationWindow.labelDesigner		!= null) repOperationWindow.labelDesigner.close();				
				if (repOperationWindow.portrayalDesigner 	!= null) repOperationWindow.portrayalDesigner.close();
				if (repOperationWindow.mapEditor		 	!= null) repOperationWindow.mapEditor.close();
								
				repOperationWindow = null;
				representation0.visible = true;
				representation1.visible = false;
				Mouse.cursor = "arrow";
				
			}			
			
			// Mouse operations
			
			private function actionMouseOver(event:Event):void {
				if (action0.visible) {
					action0.visible = false;
					action1.visible = true;
				}

			}
			
			private function actionMouseOut(event:Event):void {
				if (actionWindow == null && action1.visible) {
					action0.visible = true;
					action1.visible = false;
				}
			}

			
			private function modelingMouseOver(event:Event):void {
				if (modeling0.visible) {
					modeling0.visible = false;
					modeling1.visible = true;
				}
			}
			
			private function modelingMouseOut(event:Event):void {
				if (appModeller == null && modeling1.visible) {
					modeling0.visible = true;
					modeling1.visible = false;
				}
			}
			
			private function acquisitionMouseOver(event:Event):void {
				if (acquisition0.visible) {
					acquisition0.visible = false;
					acquisition1.visible = true;
				}
			}
			
			private function acquisitionMouseOut(event:Event):void {
				if (editor == null && acquisition1.visible) {
					acquisition0.visible = true;
					acquisition1.visible = false;
				}
			}
			
			private function analysisMouseOver(event:Event):void {
				if (analysis0.visible) {
					analysis0.visible = false;
					analysis1.visible = true;
				}
			}
			
			private function analysisMouseOut(event:Event):void {
				if (analysisWindow == null && analysis1.visible) {
					analysis0.visible = true;
					analysis1.visible = false;
				}
			}
			
			private function managementMouseOver(event:Event):void {
				if (management0.visible) {
					management0.visible = false;
					management1.visible = true;
				}
			}
			
			private function managementMouseOut(event:Event):void {
				if (manWindow == null && management1.visible) {
					management0.visible = true;
					management1.visible = false;
				}
			}
			
			private function exchangeMouseOver(event:Event):void {
				if (exchange0.visible) {
					exchange0.visible = false;
					exchange1.visible = true;
				}
			}
			
			private function exchangeMouseOut(event:Event):void {
				if (exchangeWindow == null && exchange1.visible) {
					exchange0.visible = true;
					exchange1.visible = false;
				}
			}

			private function representationMouseOver(event:Event):void {
				if (representation0.visible) {
					representation0.visible = false;
					representation1.visible = true;
				}
			}
			
			private function representationMouseOut(event:Event):void {
				if (repOperationWindow == null && representation1.visible) {
					representation0.visible = true;
					representation1.visible = false;
				}
			}
				
			// Text and instruction  Controls
			protected function text_jp_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/jp/index_jp.html");
				navigateToURL(request);
			}
			
			protected function text_en_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/en/index_en.html");
				navigateToURL(request);
			}
			
			protected function copyrightLabel_clickHandler(event:MouseEvent):void
			{
				/*
				var request:URLRequest = new URLRequest("documents/jp/gittokCopyright_jp.html");
				navigateToURL(request);
				*/
			}
			
		]]>
	</fx:Script>
	<mx:Image x="61" y="98" width="335" height="396" source="documents/figures/GIT_Bok_Frame.png"/>
	<mx:Image left="10" top="10" source="documents/pictgrams/gittokLogo.png"/>
	<s:Label x="45" y="55" text="'dʒɪtɒk" fontFamily="Futura" color="#969696" fontSize="12" fontWeight="bold"/>
	
	<mx:Image id="action0" source="@Embed(source='documents/pictgrams/pictAction0.png')" x="304" y="242" width="80" height="60" visible="true"/>
	<mx:Image id="action1" source="@Embed(source='documents/pictgrams/pictAction1.png')" x="304" y="242" width="80" height="60" visible="false"/>
	<s:Label id="actionLabel" x="311" y="247" width="60" height="63" text="" alpha="0"
			 click="actionLabel_clickHandler(event)"
			 mouseOver="actionMouseOver(event)"
			 mouseOut="actionMouseOut(event)"/>

	
	<mx:Image id="modeling0" source="@Embed(source='documents/pictgrams/pictModeling0.png')" x="31" y="216" visible="false"/>
	<mx:Image id="modeling1" source="@Embed(source='documents/pictgrams/pictModeling1.png')" x="31" y="216" visible="false"/>	
	<s:Label id="modelingLabel" x="31" y="216" width="60" height="60" text="" alpha="0"
			 click="modelingLabel_clickHandler(event)"
			 mouseOver="modelingMouseOver(event)"
			 mouseOut="modelingMouseOut(event)"/>
			 
	<mx:Image id="acquisition0" source="@Embed(source='documents/pictgrams/pictAcquisition0.png')" x="190" y="216" visible="false"/>
	<mx:Image id="acquisition1" source="@Embed(source='documents/pictgrams/pictAcquisition1.png')" x="190" y="216" visible="false"/>	
	<s:Label id="acquisitionLabel" x="190" y="216" width="60" height="60" text="" alpha="0"
			 click="acquisitionLabel_clickHandler(event)"
			 mouseOver="acquisitionMouseOver(event)"
			 mouseOut="acquisitionMouseOut(event)"/>
	
	<mx:Image id="analysis0" source="@Embed(source='documents/pictgrams/pictAnalysis0.png')" x="33" y="336" visible="false"/>
	<mx:Image id="analysis1" source="@Embed(source='documents/pictgrams/pictAnalysis1.png')" x="33" y="336" visible="false"/>	
	<s:Label id="analysisLabel" x="33" y="336" width="60" height="60" text="" alpha="0"
			 click="analysisLabel_clickHandler(event)"
			 mouseOver="analysisMouseOver(event)"
			 mouseOut="analysisMouseOut(event)"/>
	
	<mx:Image id="management0" source="@Embed(source='documents/pictgrams/pictManagement0.png')" x="191" y="338" visible="false"/>
	<mx:Image id="management1" source="@Embed(source='documents/pictgrams/pictManagement1.png')" x="191" y="338" visible="false"/>
	
	<s:Label id="managementLabel" x="191" y="338" width="60" height="60" text="" alpha="0"
			 click="managementLabel_clickHandler(event)"
			 mouseOver="managementMouseOver(event)"
			 mouseOut="managementMouseOut(event)"/>
	
	<mx:Image id="exchange0" source="@Embed(source='documents/pictgrams/pictExchange0.png')" x="37" y="451" visible="false"/>
	<mx:Image id="exchange1" source="@Embed(source='documents/pictgrams/pictExchange1.png')" x="37" y="451" visible="false"/>	
	<s:Label id="exchangeLabel" x="34" y="451" width="60" height="60" text="" alpha="0"
			 click="exchangeLabel_clickHandler(event)"
			 mouseOver="exchangeMouseOver(event)"
			 mouseOut="exchangeMouseOut(event)"/>
	
	<mx:Image id="representation0" source="@Embed(source='documents/pictgrams/pictRepresentation0.png')" x="197" y="455" visible="false"/>
	<mx:Image id="representation1" source="@Embed(source='documents/pictgrams/pictRepresentation1.png')" x="197" y="455" visible="false" 
			  width="60" height="60"/>	
	<s:Label id="representationLabel" x="197" y="455" width="60" height="60" text="" alpha="0"
			 click="representationLabel_clickHandler(event)"
			 mouseOver="representationMouseOver(event)"
			 mouseOut="representationMouseOut(event)"/>
	<s:Label x="108" y="148" text="Real World" fontSize="15" fontStyle="italic" fontWeight="bold" color="#5A5A5A"/>
	<s:Label x="322" y="309" text="Action" width="46" height="10" fontSize="12" color="#5A5A5A"/>
	
	<s:Label x="40" y="283" text="Modeling" color="#646464"/>
	<s:Label x="196" y="283" text="Acquisition" color="#646464"/>
	<s:Label x="41" y="397" text="Analysis" color="#646464"/>
	<s:Label x="189" y="397" text="Management" color="#646464"/>
	<s:Label x="37" y="519" text="Exchange" color="#646464"/>
	<s:Label x="183" y="518" text="Representation" color="#646464"/>
	
	<s:Label right="55" top="10" text="日本語" fontFamily="Osaka" color="#969696" fontSize="11"
			 buttonMode="true" click="text_jp_clickHandler(event)"/>
	<s:Label right="10" top="12" text="English" color="#969696"
			 buttonMode="true" click="text_en_clickHandler(event)"/>
	<s:Label id="copyrightlabel" right="10" bottom="10" text="© Morishige Ota, 2014" fontSize="12"
			 buttonMode="true" click="copyrightLabel_clickHandler(event)"/>
	
</s:WindowedApplication>
