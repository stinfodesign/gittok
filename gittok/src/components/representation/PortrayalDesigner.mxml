<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="654" height="708"
		  title="Portrayal Schema Designer"
		  creationComplete="initializeApp()">
	<fx:Declarations>
		<s:RadioButtonGroup id="attSelectGroup"/>
		<s:RadioButtonGroup id="boolRadioGroup"/>
		<!-- 非ビジュアルエレメント (サービス、値オブジェクトなど) をここに配置 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import dataTypes.place.*;
			import dataTypes.spatialGeometry.*;
			import dataTypes.theme.*;
			
			import flash.filesystem.*;
			import flash.utils.Dictionary;
			
			import gfm.*;
			
			import math.Distance;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.events.FlexEvent;
			
			import portrayal.gpm.*;
			import portrayal.labelStyle.*;
			import portrayal.symbol.*;
			import portrayal.symbolStyle.*;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			private var file:File;
			private var stream:FileStream = new FileStream();
			private var applicationSchemaFile:File;
			private var symbolStyleDicFile:File;
			private var labelStyleDicFile:File;
			
			private var applicationSchema:ApplicationSchema;
			
			private var featureType:FeatureType;
			private var featureTypes:Dictionary 		= new Dictionary();
			private var associationTypes:Dictionary 	= new Dictionary();
			
			private var atts:ArrayList;
			
			private var pointSyms:Dictionary;
			private var lineSyms:Dictionary;
			private var areaSyms:Dictionary;
			
			private var syms:SymbolStyleDictionary;			
			private var elements:ArrayList;
			private var styles:ArrayList;			
			private var labels:LabelStyleDictionary;
			private var portrayalSch:PortrayalSchema;
			private var fpUnits:Dictionary = new Dictionary();
			private var ftPtlUnit:FeaturePortrayalUnit;
			
			private var selectedAttType:AttributeType;
			
			private var thematicModifier:ThematicCondition;
			
			[Bindable]
			public var featureTypeArray:ArrayList = new ArrayList();
			
			[Bindable]
			private var selectedFeatureTypeArray:ArrayList = new ArrayList();
			
			[Bindable]
			public var attributeTypeArray:ArrayList = new ArrayList();
			
			[Bindable]
			public var thematicModifierTypeArray:ArrayList = new ArrayList();
			
			[Bindable]
			public var attributeNameArray:ArrayList = new ArrayList();
			
			[Bindable]
			public var geomAttributeArray:ArrayList;
			
			[Bindable]
			public var refGeomPrompt:String = "";
			
			[Bindable]
			public var sagVisible:Boolean;
			
			[Bindable]
			public var lagVisible:Boolean;
			
			[Bindable]
			public var symStyleArray:ArrayList;
			
			[Bindable]
			public var labelStyleArray:ArrayList;
			
			[Bindable]
			public var portrayalStyleArray:ArrayList;
			
			[Bindable]
			public var booleanModifierArray:ArrayList;
			
			[Bindable]
			public var qualitativeModifierArray:ArrayList;
			
			[Bindable]
			public var quantitativeModifierArray:ArrayList;
			
			[Bindable]
			public var generalModifierArray:ArrayList;
			
			[Bindable]
			public var symbolArray:ArrayList;
			
			[Bindable]
			public var labelArray:ArrayList;
			
			[Bindable]
			public var balloonAttList:ArrayList;
			
			protected function initializeApp(): void {
				this.move(350,70);
				
				// General Feature Model
				registerClassAlias("gfm.AttributeType", AttributeType);
				registerClassAlias("gfm.OperationType", OperationType);
				registerClassAlias("gfm.FeatureType", FeatureType);
				registerClassAlias("gfm.AssociationType", AssociationType);	
				registerClassAlias("gfm.ApplicationSchema", ApplicationSchema);
				registerClassAlias("gfm.ArgAttPair", ArgAttPair);
				
				// Symbol Styles
				registerClassAlias("portrayal.symbolStyle.PointSymbolStyle", PointSymbolStyle);
				registerClassAlias("portrayal.symbolStyle.LineSymbolStyle", LineSymbolStyle);
				registerClassAlias("portrayal.symbolStyle.AreaSymbolStyle", AreaSymbolStyle);
				registerClassAlias("portrayal.symbolStyle.CircleSymbolStyle", CircleSymbolStyle);
				registerClassAlias("portrayal.symbolStyle.SymbolStyle", SymbolStyle);
				registerClassAlias("portrayal.symbolStyle.SymbolStyleDictionary", SymbolStyleDictionary);
				
				// Label Styles
				registerClassAlias("portrayal.labelStyle.LabelStyle", LabelStyle);
				registerClassAlias("portrayal.labelStyle.LabelStyleDictionary", LabelStyleDictionary);
				
				// Portrayal Dictionary
				registerClassAlias("portrayal.portrayalStyle.AttributeStylePair", AttributeStylePair);	
				registerClassAlias("portrayal.portrayalStyle.AttributeSymbolPair", AttributeSymbolPair);
				registerClassAlias("portrayal.portrayalStyle.AttributeLabelPair", AttributeLabelPair);				
				registerClassAlias("portrayal.portrayalStyle.ConditionElement", ConditionElement);								
				registerClassAlias("portrayal.portrayalStyle.FeaturePortrayalUnit", FeaturePortrayalUnit);				
				registerClassAlias("portrayal.portrayalStyle.PortrayalSchema", PortrayalSchema);
				registerClassAlias("portrayal.portrayalStyle.ThematicCondition", ThematicCondition);
				registerClassAlias("portrayal.portrayalStyle.Modifier", Modifier);
				registerClassAlias("portrayal.portrayalStyle.BooleanModifier", BooleanModifier);
				registerClassAlias("portrayal.portrayalStyle.QualitativeModifier", QualitativeModifier);
				registerClassAlias("portrayal.portrayalStyle.QuantitativeModifier", QuantitativeModifier);
				
				// Basic Types
				registerClassAlias("dataTypes.simpleDataTypes.SimpleDataType", ThematicDataType);
				registerClassAlias("dataTypes.simpleDataTypes.Bool", Bool);
				registerClassAlias("dataTypes.simpleDataTypes.CharacterString", CharacterString);
				registerClassAlias("dataTypes.simpleDataTypes.Integer", Integer);
				registerClassAlias("dataTypes.simpleDataTypes.Real", Real);
				registerClassAlias("dataTypes.simpleDataTypes.Memo", Memo);

				
				// Location
				registerClassAlias("dataTypes.place.ImageURL", ImageURL);
				registerClassAlias("dataTypes.place.URL", URL);
				registerClassAlias("dataTypes.place.VideoURL", VideoURL);
				registerClassAlias("dataTypes.place.SoundURL", SoundURL);
				registerClassAlias("dataTypes.place.Address", Address);
				
				// Geometry
				registerClassAlias("dataTypes.spatialGeometry.SG_Primitive", SG_Primitive);
				registerClassAlias("dataTypes.spatialGeometry.SG_Rectangle", SG_Rectangle);
				registerClassAlias("dataTypes.spatialGeometry.Coordinate2", Coordinate2);
				registerClassAlias("dataTypes.spatialGeometry.CoordinateArray", CoordinateArray);	
				registerClassAlias("dataTypes.spatialGeometry.SG_Circle", SG_Circle);
				
			}
			
			protected function openAPSButton_clickHandler(event:MouseEvent):void
			{
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("ApplicationSchema File", "*.aps");
					file.addEventListener(Event.SELECT, openAps);
					file.browseForOpen("Open ApplicationSchema  [キャンセル: CANCEL, 選択: SELECT]", [filter]);
				} catch (error:IOError) {
					Alert.show(error.message, "Alert", 4, this);
				}												
			}
			
			private function openAps(event:Event):void {
				stream.open(file, FileMode.READ);

				applicationSchema = stream.readObject();
				featureTypes = applicationSchema.featureTypes;
				associationTypes = applicationSchema.associationTypes; 
				stream.close();
				apsNameLabel.text = file.name;
				
				for each(var fType:FeatureType in featureTypes) {
					if (!fType.isAbstract) featureTypeArray.addItem(fType);
				}
				
				applicationSchemaFile = file;
			}
			
			// Symbol operations
			protected function openSymButton_clickHandler(event:MouseEvent):void
			{
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("SymbolStyleDictionary File", "*.sym");
					file.addEventListener(Event.SELECT, openSym);
					file.browseForOpen("Open SymbolStyleDictionary  [キャンセル: CANCEL, 選択: SELECT]", [filter]);
				} catch (error:IOError) {
					Alert.show(error.message, "Alert", 4, this);
				}												
			}
			
			private function openSym(event:Event):void {

				try {
					stream.open(file, FileMode.READ);
					syms = stream.readObject();
				
					var areaSyms:Dictionary = syms.areaSymStyles;
					var lineSyms:Dictionary = syms.lineSymStyles;
					var pointSyms:Dictionary = syms.pointSymStyles;
				} catch (error:IOError) {
					Alert.show(error.message, "Alert", 4, this);
				}
				
				var symObj:Object;
				symStyleArray = new ArrayList();
				for each(var areaSymStyle:AreaSymbolStyle in areaSyms) {
					symObj = new Object();
					symObj["name"] = areaSymStyle.name;
					symObj["type"] = "Area";
					symStyleArray.addItem(symObj);
				}
				for each(var lineSymStyle:LineSymbolStyle in lineSyms) {
					symObj = new Object();
					symObj["name"] = lineSymStyle.name;
					symObj["type"] = "Line";					
					symStyleArray.addItem(symObj);
				}
				for each(var pointSymStyle:PointSymbolStyle in pointSyms) {
					symObj = new Object();
					symObj["name"] = pointSymStyle.name;
					symObj["type"] = "Point";					
					symStyleArray.addItem(symObj);
				}
				
				stream.close();
				symLabel.text = file.name;
				
				symbolStyleDicFile = file;
				
			}
			
			// Label operations			
			protected function openLabelButton_clickHandler(event:MouseEvent):void
			{
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("LabelStyleDictionary File", "*.lab");
					file.addEventListener(Event.SELECT, openLabelStyle);
					file.browseForOpen("Open labelStyleDicFile  [キャンセル: CANCEL, 選択: SELECT]", [filter]);
				} catch (error:IOError) {
					Alert.show(error.message, "Alert", 4, this);
				}																
			}
			
			private function openLabelStyle(event:Event):void {
				stream.open(file, FileMode.READ);
				labels = stream.readObject();
				
				var labelObj:Object;
				labelStyleArray = new ArrayList();
				for each(var lblStyle:LabelStyle in labels.labelStyles) {
					labelObj = new Object();
					labelObj["name"] = lblStyle.name;
					labelStyleArray.addItem(labelObj);
				}
				
				stream.close();
				labelLabel.text = file.name;
				
				labelStyleDicFile = file;
			}

			protected function symGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				var symObj:Object = symStyleArray.getItemAt(symGrid.selectedIndex) as Object;
				labelGrid.selectedIndex = -1;
				
				// Initialize symbol image
				var m:int = symbolImage.numChildren;
				for (var i:int = 0; i < m; i++) {
					symbolImage.removeChildAt(0);
				}
				symbolImage.graphics.clear();
				
				// Line symbol
				if (symObj["type"] == "Line") {
					var lss:LineSymbol = symbolImage.getChildByName("sampleLine") as LineSymbol;
					if (lss != null) symbolImage.removeChild(lss);
					
					var lineSymType:LineSymbolStyle = syms.lineSymStyles[symObj["name"]];
					
					var xarray:Array = [10, 70, 130];
					var yarray:Array = [10, 60, 10];
					
					var crv:SG_Curve = new SG_Curve;
					var crd:Coordinate2 =new Coordinate2();
					crd.x = xarray[0]; crd.y = yarray[0];
					crv.start = new SG_Point();
					crv.start.position = crd;
					crd.x = xarray[2]; crd.y = yarray[2];
					crv.end = new SG_Point();
					crv.end.position = crd;
					
					for (i = 0; i < 3; i++) {
						crd =new Coordinate2();
						crd.x = xarray[i]; crd.y = yarray[i];
						crv.shape.addItem(crd);
					}				
					
					var lSym:LineSymbol = new LineSymbol();
					var cObj:Object = new Object();
					cObj.curve = crv;
					cObj.style = lineSymType;
					lSym.decode(cObj);
					lSym.name = "sampleLine";
					symbolImage.addChild(lSym);			
				}
				
				// Area symbol
				if (symObj["type"] == "Area") {
					var ars:AreaSymbol = symbolImage.getChildByName("sampleArea") as AreaSymbol;
					if (ars != null) symbolImage.removeChild(ars);
					
					var areaSymType:AreaSymbolStyle = syms.areaSymStyles[symObj["name"]];
					
					xarray = [10, 10, 80, 150, 150, 80, 10];
					yarray = [10, 50, 65, 50,  10,  5,  10];
										
					symbolImage.graphics.beginFill(areaSymType.color, areaSymType.alpha);
					symbolImage.graphics.moveTo(10, 10);
					for (i = 1; i < 7; i++) {
						symbolImage.graphics.lineTo(xarray[i], yarray[i]);
					}
					symbolImage.graphics.endFill();
					
					//show the border
					var borderStyle:LineSymbolStyle = areaSymType.borderStyle;
					
					crv = new SG_Curve;
					for (i = 0; i < 7; i++) {
						crd =new Coordinate2();
						crd.x = xarray[i]; 
						crd.y = yarray[i];
						crv.shape.addItem(crd);
					}
					var sp:SG_Point = new SG_Point();
					sp.position.x = xarray[0];
					sp.position.y = yarray[0];
					crv.start = sp;
					var ep:SG_Point = new SG_Point();
					ep.position.x = xarray[6];
					ep.position.y = yarray[6];
					crv.end = ep;					
					
					var border:LineSymbol = new LineSymbol();
					cObj = new Object();
					cObj.curve = crv;
					cObj.style = borderStyle;
					border.decode(cObj);					
					border.name = "sampleLine";
					symbolImage.addChild(border);					
				}
				
				// Point symbol
				if (symObj["type"] == "Point") {
					var pts:PointSymbol = symbolImage.getChildByName("samplePoint") as PointSymbol;
					if (pts != null) symbolImage.removeChild(pts);
					
					var pointSymType:PointSymbolStyle = syms.pointSymStyles[symObj["name"]];
					
					elements = pointSymType.elements;
					styles   = pointSymType.styles;
					
					symbolImage.graphics.clear();
					drawPointSymElements(pointSymType.size);
					　　	
				}
			}
			
			protected function drawPointSymElements(pSize:Number):void {
				var n:int = elements.length;
				for (var i:int = 0; i < n; i++) {
					drawElement(i, pSize);
				}				
			}
			
			protected function drawElement(i:int, pSize:Number):void {
				var crv:SG_Curve = new SG_Curve();
				var style:* = styles.getItemAt(i);
				if (style is LineSymbolStyle) {
					var lStyle:LineSymbolStyle = styles.getItemAt(i) as LineSymbolStyle; 
					var cString:CoordinateArray = elements.getItemAt(i) as CoordinateArray;
					var m:int = cString.length;
					for (var i:int = 0; i < m; i++) {
						var crd:Coordinate2 = cString.getItemAt(i) as Coordinate2;
						crd.x = (crd.x - 100.0) * pSize / 200.0 + 100.0;
						crd.y = (crd.y - 100.0) * pSize / 200.0 + 100.0;
						cString.setItemAt(crd, i);
					}
					crv.shape = cString;
					var p:SG_Point = new SG_Point();
					p.position = cString.getItemAt(0) as Coordinate2;
					crv.start = p;
					p = new SG_Point();
					p.position = cString.getItemAt(cString.length - 1) as Coordinate2;
					crv.end = p;
					var lSym:LineSymbol = new LineSymbol();
					var lObj:Object = new Object();
					lObj.curve = crv;
					lObj.style = lStyle;
					lSym.decode(lObj);
					lSym.name = "sampleLine";
					symbolImage.addChild(lSym);					
				}
				else if (style is CircleSymbolStyle) {
					var cStyle:CircleSymbolStyle = styles.getItemAt(i) as CircleSymbolStyle;
					cString = elements.getItemAt(i) as CoordinateArray;
					var center:Coordinate2 = cString.getItemAt(0) as Coordinate2;
					var pointOnEdge:Coordinate2 = cString.getItemAt(1) as Coordinate2;
					var radius:Number = math.Distance.p2p(center, pointOnEdge);
					radius = radius * pSize / 200.0;
					var bStyle:LineSymbolStyle = cStyle.borderStyle;
					symbolImage.graphics.lineStyle(bStyle.thickness, 
							bStyle.color, bStyle.alpha, false, "normal", 
							bStyle.caps, bStyle.joints, 3);
					symbolImage.graphics.beginFill(cStyle.color, cStyle.alpha);
					symbolImage.graphics.drawCircle(center.x, center.y, radius);
					symbolImage.graphics.endFill();					
				}
				else if (getQualifiedClassName(style) == "portrayalSchema.symbolStyle::AreaSymbolStyle") {
					var aStyle:AreaSymbolStyle = styles.getItemAt(i) as AreaSymbolStyle;
												
					cString = elements.getItemAt(i) as CoordinateArray;
					crd = cString.getItemAt(0) as Coordinate2;
					symbolImage.graphics.beginFill(aStyle.color, aStyle.alpha);
					symbolImage.graphics.moveTo(crd.x, crd.y);
					for (i = 0; i < cString.length; i++) {
						crd = cString.getItemAt(i) as Coordinate2;
						symbolImage.graphics.lineTo(crd.x, crd.y);
					}
					symbolImage.graphics.endFill();
						
					crv.shape = cString;
							
					var border:LineSymbol = new LineSymbol();
					lObj = new Object();
					lObj.curve = crv;
					lObj.style = aStyle.borderStyle;
					border.name = "sampleLine";
					border.decode(lObj);
					symbolImage.addChild(border);
				}
			}
			
			protected function labelGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				var labelObj:Object = labelStyleArray.getItemAt(labelGrid.selectedIndex) as Object;
				var labelName:String = labelObj["name"];
				var lblStyle:LabelStyle = labels.labelStyles[labelName] as LabelStyle;
				
				symGrid.selectedIndex = -1;
				
				// Initialize symbol image
				var m:int = symbolImage.numChildren;
				for (var i:int = 0; i < m; i++) {
					symbolImage.removeChildAt(0);
				}
				symbolImage.graphics.clear();
				
				// Label
				var textFormat:TextFormat = new TextFormat();
				with (textFormat) {
					size = lblStyle.fontSize;
					font = lblStyle.font;
					color = lblStyle.color;
					if (lblStyle.bold == "normal") 
						bold = false;
					else
						bold = true;
				}
				
				var textField:TextField = new TextField();
				with (textField) {
					text = "Test String";
					autoSize = TextFieldAutoSize.LEFT;
					x =  10;
					y = 120;
				}
				textField.setTextFormat(textFormat);
				
				symbolImage.addChild(textField);
			}
			
			protected function editPortrayalRuleButton_clickHandler(event:MouseEvent):void
			{
				if (selectedFeatureTypesList.selectedIndex == -1) {
					Alert.show("Select feature type before.", "Alert", 4, this);
					return;
				}
				
				featureType = selectedFeatureTypesList.selectedItem as FeatureType;
				
				if (featureType == null) {
					Alert.show("Select feature type before.", "Alert", 4, this);
					return;					
				}
				
				var m:int = featureType.attributeTypes.length;
				
				attributeNameArray = new ArrayList();
				
				for (var i:int = 0; i < m; i++) {
					var attType:AttributeType = featureType.attributeTypes.getItemAt(i) as AttributeType;
					attributeNameArray.addItem(attType);
				}
				
				if (m > 0) attributeNameDropDown.prompt = "Select attribute";
				
				if (featureType.parent != null) inheritAttributes(featureType.parent);				
								
				if (attributeTypeLabel != null)
					attributeTypeLabel.text = "";
				
				ftPtlUnit = fpUnits[featureType.name] as FeaturePortrayalUnit;
				balloonAttList = new ArrayList();
				if (ftPtlUnit != null) {
					for each(attType in ftPtlUnit.infoPages) {
						balloonAttList.addItem(attType);	
					}
				}
			}
			
			protected function featureTypeDropDown_changeHandler(event:IndexChangeEvent):void
			{
				var fType:FeatureType = featureTypeDropDown.selectedItem as FeatureType;
				
				if (selectedFeatureTypeArray == null) selectedFeatureTypeArray = new ArrayList();
				
				selectedFeatureTypeArray.addItem(fType);
				
				featureTypeDropDown.selectedIndex = -1;
				featureTypeDropDown.prompt = "Select type";
			}
			
			private function inheritAttributes(fType:FeatureType):void {
				var m:int = fType.attributeTypes.length;
				for (var i:int = 0; i < m; i++) {
					var atType:AttributeType = fType.attributeTypes.getItemAt(i) as AttributeType;
					attributeNameArray.addItem(atType);
				}
				
				if (fType.parent != null) {
					inheritAttributes(fType.parent);
				}
			}
			
			protected function attributeNameDropDown_changeHandler(event:IndexChangeEvent):void
			{
				var attType:AttributeType = attributeNameDropDown.selectedItem as AttributeType;
				
				if (attType.dataType.search("SG_") > -1) {
					sagVisible = true;
					lagVisible = false;					
				}
				else {
					sagVisible = false;
					lagVisible = true;
				}
				
				selectedAttType = attType;  // this variable is prepared for the tabBar - general.
				
				//var fType:FeatureType    = featureTypeDropDown.selectedItem as FeatureType;
				
				attributeTypeLabel.text = attType.dataType;
				
				if (fpUnits[featureType.name] == null) {
					ftPtlUnit = new FeaturePortrayalUnit();
					ftPtlUnit.featureTypeID = featureType.name;
					fpUnits[featureType.name] = ftPtlUnit;
				}
				else {
					ftPtlUnit = fpUnits[featureType.name];
				}
				
				if (balloonCheckBox.selected) {
					this.setAttributeTypeAsBalloon(attType);
					return;
				}
				
				var m:int = attributeNameArray.length;
				thematicModifierTypeArray = new ArrayList();
				for (var i:int = 0; i < m; i++) {
					var aType:AttributeType = attributeNameArray.getItemAt(i) as AttributeType;
					thematicModifierTypeArray.addItem(aType);
				}
				thematicModifierDropDownList.prompt = "Select att";
				
				// if generalModifiers were already defined, then
				if (ftPtlUnit.generalModifiers == null) return;
				
				var asPair:AttributeStylePair = ftPtlUnit.generalModifiers[attType.name] as AttributeStylePair;
				
				if (asPair is AttributeSymbolPair) {
					symbolArray = new ArrayList();
					symbolArray.addItem(asPair);
				}
				else {
					labelArray = new ArrayList();
					labelArray.addItem(asPair);
					
					var n:int = featureType.attributeTypes.length;
					geomAttributeArray = new ArrayList();
					for (i = 0; i < n; i++) {
						var wattType:AttributeType = featureType.attributeTypes.getItemAt(i) as AttributeType;
						if (wattType.dataType.search("SG_") > -1) {
							geomAttributeArray.addItem(wattType);
						}
					}
					
					var alPair:AttributeLabelPair = asPair as AttributeLabelPair;
					if (alPair == null) return;
					
					var refGeomType:AttributeType = featureType.getAttributeTypeByName(alPair.refGeomAttName);
					refGeomPrompt = refGeomType.name; 
				}
			}
			
			protected function setAttributeTypeAsBalloon(attType:AttributeType):void {
				if (balloonAttList == null) {
					balloonAttList = new ArrayList();
				}
				if (attType.dataType.search("SG_") > -1) {
					Alert.show("Geometry cannot be represented on the info. page.", "Alert", 4, this);
					return;
				}
				balloonAttList.addItem(attType);
				ftPtlUnit.infoPages[attType.name] = attType;
			}
			
			protected function cancelBalloonButton_clickHandler(event:MouseEvent):void
			{
				var i:int = balloonList.selectedIndex;
				if (i != -1) {
					var attType:AttributeType = balloonAttList.removeItemAt(i) as AttributeType;
					delete ftPtlUnit.infoPages[attType.name];
				}
				if (balloonAttList.length == 0) balloonAttList = null;
			}
			
			protected function thematicModifierDropDownList_changeHandler(event:IndexChangeEvent):void
			{
				var i:int = thematicModifierDropDownList.selectedIndex;
				if (i == -1) return;
				
				var atType:AttributeType = thematicModifierTypeArray.getItemAt(i) as AttributeType;
				
				if (selectedFeatureTypesList.selectedIndex == -1) {
					Alert.show("Select feature type at 'Selected feature types list before.", "Alert", 4, this);
					return;
				}
				
				//var fType:FeatureType = featureTypeArray.getItemAt(selectedFeatureTypesList.selectedIndex) as FeatureType;
				var fType:FeatureType = selectedFeatureTypesList.selectedItem as FeatureType;
				
				ftPtlUnit = fpUnits[fType.name] as FeaturePortrayalUnit;
				
				thematicModifierTypeLabel.text = atType.dataType;

				if (ftPtlUnit.thematicModifier != null) {
					thematicModifier = ftPtlUnit.thematicModifier;
					
					if (atType.dataType == "Bool") {
						thematicViewStack.selectedIndex = 0;
						
						if (thematicModifier.attType == "Bool") {
							if (thematicModifier.elements.length > 0) {
								thematicViewStack.selectedIndex = 0;
								booleanModifierArray = thematicModifier.elements;
								return;
							}
						}
					}
					else if (atType.dataType == "CharacterString") {
						thematicViewStack.selectedIndex = 1;
						
						if (thematicModifier.attType == "CharacterString") {
							if (thematicModifier.elements.length > 0) {
								qualitativeModifierArray = thematicModifier.elements;
								return;
							}
						}
					}
					else if (atType.dataType == "Integer" || atType.dataType == "Real") {
						thematicViewStack.selectedIndex = 2;
						
						if (thematicModifier.attType == "Integer" ||
							thematicModifier.attType == "Real") {
							if (thematicModifier.elements.length > 0) {
								quantitativeModifierArray = thematicModifier.elements;
								return;
							}
						}
					}
				}
				
				thematicModifier = new ThematicCondition();
				thematicModifier.attName = atType.name;
				thematicModifier.attType = atType.dataType;
				
				if (atType.dataType == "Bool") {
					thematicViewStack.selectedIndex = 0;
					booleanModifierArray = new ArrayList();
					for (var j:int = 0; j < 3; j++) {
						var booleanModifier:BooleanModifier = new BooleanModifier();
						if (j == 0) { 
							booleanModifier.hasValue = true;
							booleanModifier.boolValue = true;
						}
						else if (j == 1) {
							booleanModifier.hasValue = true;
							booleanModifier.boolValue = false;
						}
						else
							booleanModifier.hasValue = false;
						
						booleanModifierArray.addItem(booleanModifier);
					}
					thematicModifier.elements = booleanModifierArray;
				}
				
				else if (atType.dataType == "CharacterString") {
					thematicViewStack.selectedIndex = 1;
					qualitativeModifierArray = new ArrayList();
					for (j = 0; j < 50; j++) {
						var qualitativeModifier:QualitativeModifier = new QualitativeModifier();
						qualitativeModifierArray.addItem(qualitativeModifier);
					}
					thematicModifier.elements = qualitativeModifierArray;
				}	
				
				else if (atType.dataType == "Integer" || atType.dataType == "Real") {
					thematicViewStack.selectedIndex = 2;
					quantitativeModifierArray = new ArrayList();
					for (j = 0; j < 30; j++) {
						var quantitativeModifier:QuantitativeModifier = new QuantitativeModifier;
						quantitativeModifierArray.addItem(quantitativeModifier);
					}
					thematicModifier.elements = quantitativeModifierArray;
				}
				else
					thematicModifierDropDownList.selectedIndex = -1;
				
			}
			
			protected function assignThematicButton_clickHandler(event:MouseEvent):void
			{
				ftPtlUnit.thematicModifier = thematicModifier;
				
				var i:int = symGrid.selectedIndex;
				if (i == -1) {
					Alert.show("Select symbol before assign.", "Warning", 4, this);
					return;
				}
				
				var symObj:Object = symStyleArray.getItemAt(i) as Object;
				
				var stackIndex:int = thematicViewStack.selectedIndex;
				if (stackIndex == 0) {
					//Bool
					var j:int = booleanModifierGrid.selectedIndex;
					if (j == -1) {
						Alert.show("Select column before assign.", "Warning", 4, this);
						return;
					}
					
					var booleanModifier:BooleanModifier = booleanModifierArray.getItemAt(j) as BooleanModifier;
					booleanModifier.symName = symObj["name"];
					booleanModifier.symType = symObj["type"];
					booleanModifierArray.setItemAt(booleanModifier, j);										
				}
				else if (stackIndex == 1) {
					//CharacterString
					j = qualitativeModifierGrid.selectedIndex;
					if (j == -1) {
						Alert.show("Select column before assign.", "Warning", 4, this);
						return;
					}
					
					var qualitativeModifier:QualitativeModifier = qualitativeModifierArray.getItemAt(j) as QualitativeModifier;
					qualitativeModifier.symName = symObj["name"];
					qualitativeModifier.symType = symObj["type"];
					qualitativeModifierArray.setItemAt(qualitativeModifier, j);
				}
				else if (stackIndex == 2) {
					//Integer or Real
					j = quantitativeModifierGrid.selectedIndex;
					if (j == -1) {
						Alert.show("Select column before assign.", "Warning", 4, this);
						return;
					}
					
					var quantitativeModifier:QuantitativeModifier 
									= quantitativeModifierArray.getItemAt(j) as QuantitativeModifier;
					quantitativeModifier.symName = symObj["name"];
					quantitativeModifier.symType = symObj["type"];
					quantitativeModifierArray.setItemAt(quantitativeModifier, j);
				}
				
			}
			
			protected function clearThematicButton_clickHandler(event:MouseEvent):void
			{			
				var stackIndex:int = thematicViewStack.selectedIndex;
				
				if (stackIndex == 0) {
					//Bool
					var j:int = booleanModifierGrid.selectedIndex;
					if (j == -1 || j > 2) {
						Alert.show("Select column before assign.", "Warning", 4, this);
						return;
					}
					
					var booleanModifier:BooleanModifier = booleanModifierArray.getItemAt(j) as BooleanModifier;
					if (j == 0) 
						booleanModifier.boolValue = true;
					else if (j == 1) 
						booleanModifier.boolValue = false;
					else
						booleanModifier = null;
					booleanModifier.symName = "";
					booleanModifier.symType = "";
					booleanModifierArray.setItemAt(booleanModifier, j);										
				
				}
				else if (stackIndex == 1) {
					//CharacterString
					j = qualitativeModifierGrid.selectedIndex;
					if (j == -1 || j > 30) {
						Alert.show("Select column before assign.", "Warning", 4, this);
						return;
					}
					
					qualitativeModifierArray.removeItemAt(j);
					
					var qualitativeModifier:QualitativeModifier = new QualitativeModifier();
					qualitativeModifierArray.addItem(qualitativeModifier);				
					
				}
				else if (stackIndex == 2) {
					//Integer or Real	
					j = quantitativeModifierGrid.selectedIndex;
					if (j == -1 || j > 30) {
						Alert.show("Select column before assign.", "Warning", 4, this);
						return;
					}
					
					quantitativeModifierArray.removeItemAt(j);
					
					var quantitativeModifier:QuantitativeModifier = new QuantitativeModifier();
					quantitativeModifierArray.addItem(quantitativeModifier);				

				}
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				// Save portrayal schema
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("Portrayal Schema", "*.psc");
					file.addEventListener(Event.SELECT, savePortrayalSchema);
					file.browseForSave("Save file");
					
				} catch (error:IOError) {
					Alert.show(error.message);
				} 
			}
			
			private function savePortrayalSchema(event:Event):void {
				var startIndex:int = file.nativePath.length - 4;
				var suffix:String = file.nativePath.slice(startIndex);
				if (suffix != ".psc") file.nativePath += ".psc";

				dictionaryLabel.text = file.name;
				var stream:FileStream = new FileStream();
				
				stream.open(file, FileMode.WRITE);
				portrayalSch = new PortrayalSchema();
				portrayalSch.applicationSchema 		= applicationSchemaFile.name;
				portrayalSch.symbolStyleDictionary 	= symbolStyleDicFile.name;
				portrayalSch.labelStyleDictionary  	= labelStyleDicFile.name;
				
				portrayalSch.fpUnits		   		= fpUnits;
				
				portrayalSch.representationOrder = new ArrayList();
				for (var i:int = 0; i < selectedFeatureTypeArray.length; i++) {
					var fType:FeatureType = selectedFeatureTypeArray.getItemAt(i) as FeatureType;
					portrayalSch.representationOrder.addItem(fType.name);
				}
				
				stream.writeObject(portrayalSch);
				stream.close();
			}
			
			protected function openButton_clickHandler(event:MouseEvent):void
			{
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("Portrayal Schema", "*.psc");
					file.addEventListener(Event.SELECT, openPortrayalSchema);
					file.browseForOpen("Open file  [キャンセル: CANCEL, 選択: SELECT]", [filter]);
				} catch (error:IOError) {
					Alert.show(error.message, "Alert", 4, this);
				}
			}
			
			private function openPortrayalSchema(event:Event):void {
				dictionaryLabel.text = file.name;
				var url:String = file.url;
				
				var myPattern:RegExp = /%20/g;  
				url = url.replace(myPattern, " ");  				
				var pathArray:Array = url.split("/");

				var path:String = "/";
				for (var i:int = 3; i < pathArray.length - 1; i++) {
					path += pathArray[i] + "/";
				}

				var stream:FileStream = new FileStream();
				
				applicationSchemaFile    = new File();
				symbolStyleDicFile = new File();
				labelStyleDicFile  = new File();
								
				try {
					stream.open(file,FileMode.READ);
					portrayalSch = stream.readObject();
					
					applicationSchemaFile.nativePath = path + portrayalSch.applicationSchema;
					symbolStyleDicFile.nativePath = path + portrayalSch.symbolStyleDictionary;
					labelStyleDicFile.nativePath  = path + portrayalSch.labelStyleDictionary;
					
					fpUnits = portrayalSch.fpUnits;
					
				} catch (error:IOError) {
					Alert.show(error.message, "Alert", 4, this);
				}
				
				apsNameLabel.text = applicationSchemaFile.name;
				symLabel.text = symbolStyleDicFile.name;
				labelLabel.text = labelStyleDicFile.name;
				
				file = applicationSchemaFile;
				this.openAps(null);
				
				file = symbolStyleDicFile;
				this.openSym(null);
				
				file = labelStyleDicFile;
				this.openLabelStyle(null);
				
				selectedFeatureTypeArray = new ArrayList();
				for (i = 0; i < portrayalSch.representationOrder.length; i++) {
					var typeName:String = portrayalSch.representationOrder.getItemAt(i) as String;
					var fType:FeatureType = applicationSchema.featureTypes[typeName] as FeatureType;
					selectedFeatureTypeArray.addItem(fType);
				}
				/*
				for each (fType in applicationSchema.featureTypes) {
					featureTypeArray.addItem(fType);
				}
				*/
			}
			
			protected function sortQuantitativeModifierButton_clickHandler(event:MouseEvent):void
			{
				var w:QuantitativeModifier = quantitativeModifierArray.getItemAt(0) as QuantitativeModifier;
				for (var len:int = 1; w.symName != null; len++) {
					w = quantitativeModifierArray.getItemAt(len) as QuantitativeModifier;
				}
				len--;
				
				var mj:int;
				for (var i:int = 0; i < len - 1; i++) {
					mj = i;
					var minimum:Number = Number.MAX_VALUE;
					for (var j:int = i; j < len; j++) {
						var modi:QuantitativeModifier = quantitativeModifierArray.getItemAt(j) as QuantitativeModifier;
						if (minimum > modi["lowerValue"]) {
							minimum = modi["lowerValue"];
							mj = j;
						}
					}
					w = quantitativeModifierArray.getItemAt(mj) as QuantitativeModifier;
					quantitativeModifierArray.setItemAt(quantitativeModifierArray.getItemAt(i), mj);
					quantitativeModifierArray.setItemAt(w, i);
				}
			}
			
			protected function assignGeneralButton_clickHandler(event:MouseEvent):void
			{
				/*
				if (featureTypeDropDown.selectedIndex == -1) {
					Alert.show("Select styles before.", "Error", 4, this);
					return;
				}
				
				var fid:int = featureTypeDropDown.selectedIndex
				var fType:FeatureType = featureTypeArray.getItemAt(fid) as FeatureType;		
				*/
				
				ftPtlUnit = fpUnits[featureType.name] as FeaturePortrayalUnit;
				if (ftPtlUnit == null) {
					ftPtlUnit = new FeaturePortrayalUnit();
					ftPtlUnit.featureTypeID = featureType.name;
				}
				
				var aid:int = attributeNameDropDown.selectedIndex;
				
				var attType:AttributeType = attributeNameArray.getItemAt(aid) as AttributeType;
				
				if (attType.dataType.search("SG_") > -1) {
					symbolAssignGroup.visible = true;
					labelAssignGroup.visible = false;
				}
				else {
					symbolAssignGroup.visible = false;
					labelAssignGroup.visible = true;	
				}
	
				if (symGrid.selectedIndex > -1) {
					var asPair:AttributeSymbolPair = new AttributeSymbolPair();
					asPair.attName = attType.name;
					asPair.attType = attType.dataType;

					var symObj:Object = symStyleArray.getItemAt(symGrid.selectedIndex) as Object;
					asPair.symName = symObj["name"];
					asPair.symType = symObj["type"];
					
					if (ftPtlUnit.generalModifiers == null) ftPtlUnit.generalModifiers = new Dictionary();
					ftPtlUnit.generalModifiers[attType.name] = asPair;	
					
					symbolArray = new ArrayList();	// Becasue data provider shall be an array.
					symbolArray.addItem(asPair);
					
					symGrid.selectedIndex = -1;
				}
					
				if (labelGrid.selectedIndex > -1) {
					var alPair:AttributeLabelPair = new AttributeLabelPair();
					alPair.attName = attType.name;
					alPair.attType = attType.dataType;
					
					var labelObj:Object = labelStyleArray.getItemAt(labelGrid.selectedIndex) as Object;
					alPair.labelName = labelObj["name"];
					alPair.labelType = "Label"; 
					
					if (ftPtlUnit.generalModifiers == null) ftPtlUnit.generalModifiers = new Dictionary();					
					ftPtlUnit.generalModifiers[attType.name] = alPair;	
					
					labelArray = new ArrayList();	// Becasue data provider shall be an array.
					labelArray.addItem(alPair);
					
					labelGrid.selectedIndex = -1;
					
					refGeomAttList.prompt ="Select geom";
					
				}

			}
			

			protected function clearGeneralButton_clickHandler(event:MouseEvent):void
			{
				if (symbolArray != null) 
					symbolArray.removeItemAt(0);
				
				if (labelArray != null) {
					labelArray.removeItemAt(0);
					refGeomPrompt = "";
				}	
				
				var aid:int = attributeNameDropDown.selectedIndex;
				var attType:AttributeType = attributeNameArray.getItemAt(aid) as AttributeType;
				ftPtlUnit.generalModifiers[attType.name] = null;
			}
			
			// Text and instruction  Controls
			protected function text_jp_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/jp/portrayalSchemaDesigner_jp.html");
				navigateToURL(request);
			}
			
			protected function text_en_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/en/portrayalSchemaDesigner_en.html");
				navigateToURL(request);
			}
						
			protected function refGeomAttList_changeHandler(event:IndexChangeEvent):void
			{
				var geomAttType:AttributeType = geomAttributeArray.getItemAt(refGeomAttList.selectedIndex) as AttributeType;
				var alPair:AttributeLabelPair = ftPtlUnit.generalModifiers[selectedAttType.name] as AttributeLabelPair;
				if (alPair == null) {
					Alert.show("Select label style before setting location.", "Alert", 4, this);
					return;
				}
				alPair.refGeomAttName = geomAttType.name;
				ftPtlUnit.generalModifiers[selectedAttType.name] = alPair;
								
				fpUnits[ftPtlUnit.featureTypeID] = ftPtlUnit;				
			}
			
			protected function tabBar_clickHandler(event:MouseEvent):void
			{

			}
			/*
			protected function featureTypeSpinner_changeHandler(event:Event):void {
				
				var index:int = featureTypeSpinner.maximum - featureTypeSpinner.value;
				if (index < selectedFeatureTypesList.selectedIndex) {
					var i:int = selectedFeatureTypesList.selectedIndex;
					var fType:FeatureType = selectedFeatureTypeArray.getItemAt(i) as FeatureType;
					trace("index:" + index + "  i:" + i);
					if (index < i) {
						var nType:FeatureType = selectedFeatureTypeArray.getItemAt(i - 1) as FeatureType;
						selectedFeatureTypeArray.setItemAt(fType, i - 1);
						selectedFeatureTypeArray.setItemAt(nType, i);
						return;
					}
					if (index > i) {
						nType = selectedFeatureTypeArray.getItemAt(i + 1) as FeatureType;
						selectedFeatureTypeArray.setItemAt(fType, i + 1);
						selectedFeatureTypeArray.setItemAt(nType, i);
						return;						
					}	
				}
				selectedFeatureTypesList.selectedIndex = -1;
			}
			*/
				
			protected function deleteSelectedFeatureTypeButton_clickHandler(event:MouseEvent):void
			{
				if (selectedFeatureTypeArray == null) {
					Alert.show("No feature type is selected.", "Alert", 4, this);
					return;
				}
				
				if (selectedFeatureTypesList.selectedIndex == -1) {
					Alert.show("No feature type is selected.", "Alert", 4, this);
					return;
				}
				
				var index:int = selectedFeatureTypesList.selectedIndex;
				selectedFeatureTypeArray.removeItemAt(index);
				
				//featureTypeSpinner.maximum = selectedFeatureTypeArray.length - 1;
				
			}
						
			
			protected function upButton_clickHandler(event:MouseEvent):void
			{

				
			}
			
			protected function downButton_clickHandler(event:MouseEvent):void
			{

			}
			
			protected function upButtonImage_clickHandler(event:MouseEvent):void
			{
				var index:int = selectedFeatureTypesList.selectedIndex;
				if (index > 0) {
					var ft:FeatureType = selectedFeatureTypeArray.getItemAt(index) as FeatureType;
					var ut:FeatureType = selectedFeatureTypeArray.getItemAt(index - 1) as FeatureType;
					selectedFeatureTypeArray.setItemAt(ut, index);
					selectedFeatureTypeArray.setItemAt(ft, index - 1);
					selectedFeatureTypesList.selectedIndex--;
				}	
			}
			
			protected function downButtonImage_clickHandler(event:MouseEvent):void
			{
				var index:int = selectedFeatureTypesList.selectedIndex;
				if (index < (selectedFeatureTypeArray.length - 1)) {
					var ft:FeatureType = selectedFeatureTypeArray.getItemAt(index) as FeatureType;
					var dt:FeatureType = selectedFeatureTypeArray.getItemAt(index + 1) as FeatureType;
					selectedFeatureTypeArray.setItemAt(dt, index);
					selectedFeatureTypeArray.setItemAt(ft, index + 1);
					selectedFeatureTypesList.selectedIndex++;					
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Image x="12" y="7" source="@Embed(source='images/pictRepresentation1.png')"/>
	<s:Image id="upButtonImage" x="279" y="194" source="@Embed(source='images/upButton.png')" 
			 click="upButtonImage_clickHandler(event)"/>
	<s:Image id="downButtonImage" x="279" y="218" source="@Embed(source='images/downButton.png')" 
			 click="downButtonImage_clickHandler(event)"/>	
	<s:Label x="75" y="15" fontFamily="Arial" fontSize="16" text="Portrayal Schema Designer"/>
	<s:Label id="apsNameLabel" x="31" y="94" width="120" height="20" backgroundColor="#DADADA"
			 fontSize="11" verticalAlign="middle"/>
	<s:Button id="openAPSButton" x="33" y="67" width="55" label="open"
			  click="openAPSButton_clickHandler(event)"/>
	<s:Label x="93" y="66" width="56" height="24" fontSize="10" text="Application Schema"/>
	<s:Button id="openSymButton" x="176" y="67" width="55" label="open"
			  click="openSymButton_clickHandler(event)"/>
	<s:Label x="309" y="-148" width="62" height="21" fontSize="10" text="Symbol Style Dictionary"/>
	<s:Label id="symLabel" x="175" y="94" width="120" height="20" backgroundColor="#DADADA"
			 fontSize="11" verticalAlign="middle"/>
	<s:Line x="-2" y="31" xFrom="30" xTo="600" yFrom="100" yTo="100">
		<s:stroke>
			<s:SolidColorStroke color="#ffffff" weight="1" />		
		</s:stroke>
	</s:Line> 
	<s:DataGrid id="symGrid" x="44" y="502" width="210" height="165" fontSize="11" dataProvider="{symStyleArray}"
				requestedRowCount="4" selectionChange="symGrid_selectionChangeHandler(event)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="name" headerText="Symbol Name"></s:GridColumn>
				<s:GridColumn dataField="type" headerText="Type"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Label x="43" y="487" fontSize="11" text="Symbol Styles"/>
	<s:Button id="openLabelButton" x="305" y="67" width="55" label="open"
			  click="openLabelButton_clickHandler(event)"/>
	<s:Label id="labelLabel" x="304" y="94" width="120" height="20" backgroundColor="#DADADA"
			 fontSize="11" verticalAlign="middle"/>
	<s:Label x="366" y="67" width="56" height="21" fontSize="10" text="Label Style Dictionary"/>
	<s:DataGrid id="labelGrid" x="275" y="502" width="107" height="165" fontSize="11"
			 	dataProvider="{labelStyleArray}"
				requestedRowCount="4" selectionChange="labelGrid_selectionChangeHandler(event)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="name" headerText="Label Name"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Label x="275" y="488" fontSize="11" text="Label Styles"/>
	<mx:Image id="symbolImage" x="403" y="502" width="165" height="165"/>
	<s:Label x="406" y="487" fontSize="11" text="Sample"/>
	<s:DropDownList id="featureTypeDropDown" x="30" y="152" width="121"
					change="featureTypeDropDown_changeHandler(event)"
					dataProvider="{featureTypeArray}" fontSize="11" labelField="name"
					prompt="Select type"></s:DropDownList>
	<s:Label x="30" y="138" fontSize="11" text="Feature types"/>
	<s:Label x="276" y="256" fontSize="11" text="Feature type"/>
	
	<s:TabBar id="tabBar" x="44" y="264" height="20" dataProvider="{myViewStack}" click="tabBar_clickHandler(event)"/>	
	
	<mx:ViewStack id="myViewStack" 
				  borderStyle="solid" width="536" height="197" x="44" y="283" backgroundColor="#fefee5"> 
		
		<s:NavigatorContent id="thematicTab" label="thematic"> 
			<!--
			<s:TabBar id="thematicTabBar" x="11" y="43" height="20" dataProvider="{thematicViewStack}"/>
			-->
			<mx:ViewStack id="thematicViewStack" 
						  borderStyle="solid" x="11" y="53" width="514" height="132" backgroundColor="#ffffff">
				<s:NavigatorContent id="boolStack" width="100%" height="100%" label="bool">
					<s:DataGrid id="booleanModifierGrid" x="133" y="19" width="255" height="95" fontSize="11"
								dataProvider="{booleanModifierArray}" requestedRowCount="4">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="symName" headerText="Symbol Name"
											  sortable="false"></s:GridColumn>
								<s:GridColumn dataField="symType" headerText="Symbol Type"
											  sortable="false"></s:GridColumn>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
					<s:Label x="3" y="3" text="Data collection units" fontSize="11" />
					<s:Label x="99" y="51" fontSize="11" fontWeight="normal" text="True"/>
					<s:Label x="99" y="73" fontSize="11" fontWeight="normal" text="False"/>
					<s:Label x="99" y="96" fontSize="11" text="Null"/>
				</s:NavigatorContent>
				<s:NavigatorContent id="stringStack" width="100%" height="100%" label="characterString">
					<s:DataGrid id="qualitativeModifierGrid" x="18" y="19" width="325" height="101"
								dataProvider="{qualitativeModifierArray}" editable="true"
								requestedRowCount="4" fontSize="11">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn width="100" dataField="stringValue" headerText="value" editable="true"
											  resizable="false" sortable="false"></s:GridColumn>
								<s:GridColumn width="100" dataField="symName" editable="false"
											  headerText="sym name" resizable="false"
											  sortable="false"></s:GridColumn>
								<s:GridColumn width="100" dataField="symType" editable="false"
											  headerText="sym type" resizable="true"
											  sortable="false"></s:GridColumn>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
					<s:Label x= "3" y="3" text="Data collection units" fontSize="11" />
				</s:NavigatorContent>
				<s:NavigatorContent id="numberStack" width="100%" height="100%" label="integer/real">
					<s:DataGrid id="quantitativeModifierGrid" x="3" y="13" width="434" height="115" fontSize="11"
								dataProvider="{quantitativeModifierArray}" requestedRowCount="4" editable="true">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="lowerValue" editable="true" headerText="lower"></s:GridColumn>
								<s:GridColumn dataField="upperValue" editable="true" headerText="upper"></s:GridColumn>
								<s:GridColumn dataField="symName" editable="false" headerText="sym name"></s:GridColumn>
								<s:GridColumn dataField="symType" editable="false" headerText="sym type"></s:GridColumn>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
					<s:Button id="sortquantitativeModifierButton" x="445" y="13" width="50" height="20"
							  label="sort" click="sortQuantitativeModifierButton_clickHandler(event)"/>
					<s:Label x="3" y="3" text="Data collection units" fontSize="11" />
				</s:NavigatorContent>
			</mx:ViewStack>
			<s:Label x="13" y="22" fontSize="11" text="Modifier"/>
			<s:DropDownList id="thematicModifierDropDownList" x="64" y="16" change="thematicModifierDropDownList_changeHandler(event)"
							dataProvider="{thematicModifierTypeArray}" labelField="name"></s:DropDownList>
			<s:Button id="assignThematicButton" x="397" y="17" width="60" height="20" label="assign"
					  click="assignThematicButton_clickHandler(event)"/>
			<s:Button id="clearThematicButton" x="463" y="17" width="60" height="20" label="clear"
					  click="clearThematicButton_clickHandler(event)"/>
			<s:Label id="thematicModifierTypeLabel" x="219" y="17" width="110" height="20"
					 backgroundColor="#DADADA" verticalAlign="middle"/>
			<s:Label x="187" y="21" fontSize="11" text="Type"/>
		</s:NavigatorContent>
		
		<s:NavigatorContent id="generalTab" label="general">
			<s:Button id="assignGeneralButton" x="381" y="30" width="60" height="20"
				  label="assign" click="assignGeneralButton_clickHandler(event)"/>
			<s:Button id="clearGeneralButton" x="448" y="30" width="60" height="20" label="clear"
					  click="clearGeneralButton_clickHandler(event)"/>
						
			<s:Group id="symbolAssignGroup" visible="{sagVisible}" width="340" height="99">
				<s:Label x="66" y="23" width="165" height="20" text="Symbol style "/>
				<s:DataGrid id="symbolAssignGrid" x="65" y="42" width="240" height="48" fontSize="11"
							dataProvider="{symbolArray}"
							requestedRowCount="1">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="symName" headerText="symbol name"></s:GridColumn>
							<s:GridColumn dataField="symType" headerText="symbol type"></s:GridColumn>
							
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>				
			</s:Group>
			
			<s:Group id="labelAssignGroup" visible="{lagVisible}" x="0" y="98" width="508"
					 height="96">
				<s:Label x="67" y="8" text="Label style"/>
				<s:DataGrid id="labelAssignGrid" x="67" y="24" width="240" height="48"
							dataProvider="{labelArray}"
							requestedRowCount="1">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="labelName" headerText="label name"></s:GridColumn>
							<s:GridColumn dataField="labelType" headerText="label type" resizable="false"
										  sortable="false"></s:GridColumn>
						</s:ArrayList>
					</s:columns>					
				</s:DataGrid>

				<!-- Draw rectangle with square corners. -->
				<s:Rect x="306" y="24" width="145" height="47">
					<s:stroke>
						<s:SolidColorStroke color="0x000000" weight="1"/>
					</s:stroke>
					<s:fill>
						<s:SolidColor color="0xFFFFFF" />
					</s:fill>
				</s:Rect>
				
				<s:Label x="316" y="31" fontWeight="bold" text="Reference geometry"/>
				<s:DropDownList id="refGeomAttList" x="316" y="47" width="124"
								change="refGeomAttList_changeHandler(event)"
								dataProvider="{geomAttributeArray}" 
								prompt="{refGeomPrompt}"
							 	labelField="name">
				</s:DropDownList>			
			</s:Group>

		</s:NavigatorContent>
		
	</mx:ViewStack>
	<s:Label id="attributeTypeLabel" x="364" y="235" width="120" height="20"
			 backgroundColor="#DADADA" fontSize="11" verticalAlign="middle"/>
	<s:DropDownList id="attributeNameDropDown" x="335" y="210" width="149"
					change="attributeNameDropDown_changeHandler(event)"
					dataProvider="{attributeNameArray}" fontSize="11" labelField="name"></s:DropDownList>
	<s:Label x="335" y="239" fontSize="11" text="Type"/>
	<s:Button id="saveButton" x="446" y="93" width="55" height="20" label="save"
			  click="saveButton_clickHandler(event)"/>
	<s:Label id="dictionaryLabel" x="507" y="94" width="100" height="20" backgroundColor="#DADADA"
			 fontSize="11" verticalAlign="middle" lineBreak="explicit" />
	<s:Button id="openButton" x="446" y="67" width="55" height="20" label="open"
			  click="openButton_clickHandler(event)"/>
	<s:Label x="508" y="65" width="51" height="29" fontSize="10" text="Portrayal Schema"/>
	
	<s:Label x="507" y="10" text="日本語" fontFamily="Osaka" color="#969696" fontSize="11"
			 buttonMode="true" click="text_jp_clickHandler(event)"/>
	<s:Label x="548" y="12" text="English" color="#969696"
			 buttonMode="true" click="text_en_clickHandler(event)"/>
	<s:List id="balloonList" x="492" y="158" width="120" height="83" 
			fontSize="10" dataProvider="{balloonAttList}" labelField="name">
	</s:List>
	<s:Label x="492" y="131" width="139" height="34" fontSize="11"
			 text="Selected att. for info. pages"/>
	<s:CheckBox id="balloonCheckBox" x="364" y="175" label="attr. for info. pages" fontSize="11"/>
	<s:Button id="cancelBalloonButton" x="492" y="244" width="60" height="20" label="cancel"
			  click="cancelBalloonButton_clickHandler(event)"/>
	<s:Label x="156" y="138" fontSize="11" text="Selected feature types"/>
	
	<!--
	<s:Spinner id="featureTypeSpinner" x="134" y="217" width="16"
			   change="featureTypeSpinner_changeHandler(event)" />
	-->
	
	<s:Button id="deleteSelectedFeatureTypeButton" x="211" y="245" width="62" label="delete"
			  click="deleteSelectedFeatureTypeButton_clickHandler(event)"/>
	<s:List id="selectedFeatureTypesList" x="156" y="153" width="118" height="88"
				 requireSelection="false"
				 dataProvider="{selectedFeatureTypeArray}"
				 labelField="name" />
	<s:Button id="editPortrayalRuleButton" x="278" y="153" width="50" label="edit"
			  click="editPortrayalRuleButton_clickHandler(event)"/>
	<s:Label x="332" y="158" fontSize="11" text="Portrayal rules"/>
	<s:Label x="553" y="253" fontSize="11" text=" Attribute type"/>
	<s:Label x="335" y="198" fontSize="11" text="Attribute name"/>
	<s:Label x="236" y="68" width="61" height="21" fontSize="10" text="Symbol Style Dictionary"/>


</s:Window>
