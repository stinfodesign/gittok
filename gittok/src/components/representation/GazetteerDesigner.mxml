<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  backgroundColor="#c5c5c5"
		  creationComplete="initializeApp()"
		  width="360" height="466">
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup"/>
		<!-- 非ビジュアルエレメント (サービス、値オブジェクトなど) をここに配置 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import coordinateReference.*;
			
			import dataTypes.place.*;
			import dataTypes.simpleDataTypes.*;
			import dataTypes.spatialGeometry.*;
			
			import flash.filesystem.*;
			
			import geoOperations.Center;
			
			import gfm.*;
			
			import instanceModel.*;
			
			import locationReference.GazetteItem;
			import locationReference.GazetteerType;
			
			import gfm.*;
			import math.*;
			
			import instanceModel.*;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			
			import portrayal.symbolStyle.*;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			private var file:File;
			private var stream:FileStream = new FileStream();
			private var applicationSchemaFile:File;
			
			private var kit:Kit;
			private var kitURL:String;
			private var applicationSchema:ApplicationSchema;
			private var featureTypes:Dictionary = new Dictionary();
			
			private var gazetteer:GazetteerType;			
			private var fType:FeatureType;
			private var	geoNameType:AttributeType;
			private var positionType:AttributeType;
			private var gazetteArray:ArrayList = new ArrayList();
			
			
						
			[Bindable]
			public var featureTypeArray:ArrayList = new ArrayList();
			
			[Bindable]
			public var attributeTypeArray:ArrayList = new ArrayList();
			
			protected function initializeApp():void {
				
				// Basic Types
				registerClassAlias("dataTypes.simpleDataTypes.SimpleDataType", SimpleDataType);
				registerClassAlias("dataTypes.simpleDataTypes.Bool", Bool);
				registerClassAlias("dataTypes.simpleDataTypes.CharacterString", CharacterString);
				registerClassAlias("dataTypes.simpleDataTypes.Integer", Integer);
				registerClassAlias("dataTypes.simpleDataTypes.Real", Real);
				registerClassAlias("dataTypes.simpleDataTypes.Memo", Memo);
				
				// Geometry
				registerClassAlias("dataTypes.spatialGeometry.Coordinate2", Coordinate2);
				registerClassAlias("dataTypes.spatialGeometry.CoordinateArray", CoordinateArray);
				registerClassAlias("dataTypes.spatialGeometry.GeodeticCoordinate", GeodeticCoordinate);
				registerClassAlias("dataTypes.spatialGeometry.PlaneRectangularCoordinate", PlaneRectangularCoordinate);
				registerClassAlias("dataTypes.spatialGeometry.SG_Circle", SG_Circle);
				registerClassAlias("dataTypes.spatialGeometry.SG_Complex", SG_Complex);
				registerClassAlias("dataTypes.spatialGeometry.SG_Curve", SG_Curve);				
				registerClassAlias("dataTypes.spatialGeometry.SG_Object", SG_Object);				
				registerClassAlias("dataTypes.spatialGeometry.SG_OrientableCurve", SG_OrientableCurve);
				registerClassAlias("dataTypes.spatialGeometry.SG_Ring", SG_Ring);
				registerClassAlias("dataTypes.spatialGeometry.SG_Point", SG_Point);
				registerClassAlias("dataTypes.spatialGeometry.SG_Primitive", SG_Primitive);
				registerClassAlias("dataTypes.spatialGeometry.SG_Rectangle", SG_Rectangle);				
				registerClassAlias("dataTypes.spatialGeometry.SG_Surface", SG_Surface);
				
				// Location
				registerClassAlias("dataTypes.place.Address", Address);
				registerClassAlias("dataTypes.place.URL", URL);
				registerClassAlias("dataTypes.place.ImageURL", ImageURL);
				registerClassAlias("dataTypes.place.VideoURL", VideoURL);
				registerClassAlias("dataTypes.place.SoundURL", SoundURL);
				
				// General Feature Model
				registerClassAlias("gfm.AttributeType", AttributeType);
				registerClassAlias("gfm.OperationType", OperationType);
				registerClassAlias("gfm.FeatureType", FeatureType);
				registerClassAlias("gfm.AssociationType", AssociationType);
				registerClassAlias("gfm.ApplicationSchema", ApplicationSchema);	
				registerClassAlias("gfm.ArgAttPair", ArgAttPair);
				
				// Instance Model
				registerClassAlias("instanceModel.Kit", Kit);
				registerClassAlias("instanceModel.FeatureSet", FeatureSet);
				registerClassAlias("instanceModel.Feature", Feature);
				registerClassAlias("instanceModel.AssociationSet", AssociationSet);
				registerClassAlias("instanceModel.Association", Association);
				
				// File
				registerClassAlias("flash.filesystem.File", File);
				
				// Symbol styles
				registerClassAlias("symbolStyle.PointSymbolStyle", PointSymbolStyle);
				registerClassAlias("symbolStyle.LineSymbolStyle", LineSymbolStyle);
				registerClassAlias("symbolStyle.AreaSymbolStyle", AreaSymbolStyle);
				registerClassAlias("symbolStyle.SymbolStyleSchema", SymbolStyleDictionary);
				registerClassAlias("symbolStyle.SymbolStyle", SymbolStyle);
				
				// Affine parameter
				registerClassAlias("math.AffineParam", AffineParam);
				
				//Coordinate ReferenceSystem
				registerClassAlias("coordinateReference.CRS", CRS);
				registerClassAlias("coordinateReference.Axis", Axis);
				registerClassAlias("coordinateReference.CoordinateSystem", CoordinateSystem);
				registerClassAlias("coordinateReference.Ellipsoid", Ellipsoid);
				registerClassAlias("coordinateReference.GeodeticDatum", GeodeticDatum);
				registerClassAlias("coordinateReference.PrimeMeridian", PrimeMeridian);
				registerClassAlias("coordinateReference.GaussKrugerProjection", GaussKrugerProjection);
				registerClassAlias("coordinateReference.PSOrigin", IdentifiedCoordinate);
				registerClassAlias("coordinateReference.VerticalDatum", VerticalDatum);	
				
				// Gazetteer
				registerClassAlias("locationReference.GazetteItem", GazetteItem);
				registerClassAlias("locationReference.Gazetteer", GazetteerType);
				
			
				this.move(350, 460);
			}	
			
			protected function openKitButton_clickHandler(event:MouseEvent):void
			{
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("Kit", "*.kit");
					file.addEventListener(Event.SELECT, openKit);
					file.browseForOpen("Open Kit  [キャンセル: CANCEL, 選択: SELECT]", [filter]);
				} catch (error:IOError) {
					trace(error.message);
				}												
			}
			
			private function openKit(event:Event):void {
				kit = new Kit();
				
				kitURL = file.name;
				stream.open(file, FileMode.READ);
				
				kit = stream.readObject() as Kit;
				stream.close();
				
				
				featureTypes = kit.applicationSchema.featureTypes;
				stream.close();
				kitNameLabel.text = file.name;
				
				applicationSchema = kit.applicationSchema;		
				
				for each(var ffType:FeatureType in featureTypes) {
					if (!ffType.isAbstract) featureTypeArray.addItem(ffType);
				}
			}
			
			protected function featureTypeDropDown_changeHandler(event:IndexChangeEvent):void
			{
				fType = featureTypeDropDown.selectedItem as FeatureType;
				
				var m:int = fType.attributeTypes.length;
				
				attributeTypeArray = new ArrayList();
				
				for (var i:int = 0; i < m; i++) {
					var attType:AttributeType = fType.attributeTypes.getItemAt(i) as AttributeType;
					attributeTypeArray.addItem(attType);
				}
				// if (fType.parent != null) inheritAttributes(fType.parent);
				
				
			}
			
			private function inheritAttributes(ffType:FeatureType):void {
				var m:int = ffType.attributeTypes.length;
				for (var i:int = 0; i < m; i++) {
					var atType:AttributeType = ffType.attributeTypes.getItemAt(i) as AttributeType;
					attributeTypeArray.addItem(atType);
				}
				
				if (ffType.parent != null) {
					inheritAttributes(ffType.parent);
				}
			}
			
			protected function attributeGrid_clickHandler(event:MouseEvent):void
			{
				if (attributeGrid.selectedIndex == -1) return;
				
				var atType:AttributeType = attributeTypeArray.getItemAt(attributeGrid.selectedIndex) as AttributeType;
				var dt:String = atType.dataType;
				
				if (geoNameRadio.selected) {
					if (dt == "SG_Point" || dt == "SG_Curve" || dt == "SG_Surface") {
						Alert.show("Geographic name cannot be a geometry.", "Alert", 4, this);
						attributeGrid.selectedIndex = -1;
						return;
					}	
					geoNameLabel.text = atType.name;
					geoNameType = attributeGrid.selectedItem as AttributeType;
					return;
				}
				
				if (positionRadio.selected) {
					if (!(dt == "SG_Point" || dt == "SG_Curve" || dt == "SG_Surface")) {
						Alert.show("Position shall be a geometry.", "Alert", 4, this);
						attributeGrid.selectedIndex = -1;
						return;
					}	
					positionLabel.text = atType.name;
					positionType = attributeGrid.selectedItem as AttributeType;
					return;
				}
				
				attributeGrid.selectedIndex = -1;
			}
						
			protected function saveGazetButton_clickHandler(event:MouseEvent):void
			{
				if (fType == null) {
					Alert.show("Feature type is not selected.", "Alert", 4, this);
					return;
				}
				if (geoNameType == null) {
					Alert.show("Geographic name is not selected.", "Alert", 4, this);
					return;
				}
				if (positionType == null) {
					Alert.show("Position type is not selected.", "Alert", 4, this);
					return;
				}
								
				// Create a gazetteer
				var featureSet:FeatureSet = kit.featureSetArray[fType.name] as FeatureSet;
				var features:Dictionary = featureSet.features;

				for each(var feature:Feature in features) {
					var geoName:String = "";
					var point:SG_Point = new SG_Point();
					var positionArray:ArrayList = new ArrayList();
					
					var locList:ArrayList = feature.attributes[geoNameType.name] as ArrayList;
					var m:int = locList.length;
					
					for (var i:int = 0; i < m; i++) {
						var loc:* = locList.getItemAt(i);
						if (loc is CharacterString) geoName += loc.value + " ";
						if (loc is Address) geoName += loc.toString() + " ";
					}
					if (geoName == "") {
						Alert.show("A data type of a geographic name shall be CharacterString or Address.", "Alert", 4, this);
						return;
					}
						
					var posList:ArrayList = feature.attributes[positionType.name] as ArrayList;
					var argObj:Object = new Object();
					
					var pos:* = posList.getItemAt(0);
					if (pos is SG_Point) positionArray = posList;
					if (pos is SG_Curve) {
						var attValues:ArrayList = new ArrayList();
						attValues.addItem(posList);
						argObj["curve"] = attValues;
						positionArray.addItem(Center.centerLayingOnCurve(argObj));
							
					}
					if (pos is SG_Surface) {
						attValues = new ArrayList();
						attValues.addItem(posList);
						argObj["surface"] = attValues;
						positionArray.addItem(Center.centerOfSurface(argObj));
					}
					if (positionArray.length == 0) {
						Alert.show("A data type of a position shall be SG_Point, SG_Curve, or SG_Surface.", "Alert", 4, this);
						return;
					}
					else {
						argObj = new Object();
						//attValues = new ArrayList();
						//attValues.addItem(positionArray);
						argObj["points"] = positionArray;
						point = Center.centerOfPoints(argObj);
					}
					
					var gazetteItem:GazetteItem = new GazetteItem;
					gazetteItem.geoName = geoName;
					gazetteItem.position = point.position;
					gazetteArray.addItem(gazetteItem);
				}
				
				// save the gazetteer

				try {
					file = new File();
					file.addEventListener(Event.SELECT, saveGazet);
					file.browseForSave("Save  gazetteer    [キャンセル:CANCEL  保存:SAVE]");		
				} catch (error:IOError) {
					Alert.show("Could not save gazetteer.", "Alert", 4, this);
				}
			}
			
			private function saveGazet(event:Event):void {	
				var gazetteer:GazetteerType = new GazetteerType();
				gazetteer.kitURL = kitURL; // the name of the kit file
				gazetteer.featureType = fType;
				gazetteer.geoNameType = geoNameType;
				gazetteer.positionType = positionType;
				gazetteer.gazetteItemList = gazetteArray;
				trace(gazetteer.getXML().toXMLString());
				
				var startIndex:int = file.nativePath.length - 4;
				var suffix:String = file.nativePath.slice(startIndex);
				if (suffix != ".gaz") file.nativePath += ".gaz";					
								
				try {
					stream = new FileStream();
					stream.open(file, FileMode.WRITE);
					stream.writeObject(gazetteer);
					stream.close();
				} catch (e:IOError) {
					trace("Gazetteer close error:" + e);
				}
				
				gazetteerLabel.text = file.name;
				
			}
			
			// Restore gazetteer
			protected function openGazetteButton_clickHandler(event:MouseEvent):void
			{
				// Open gazetteer
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("Gazetteer File", "*.gaz");
					file.addEventListener(Event.SELECT, openGazette);
					file.browseForOpen("Open gazetteer file    [キャンセル:CANCEL  選択:SELECT]", [filter]);
					
				} catch (error:IOError) {
					Alert.show("Gazetteer file open error", "Alert", 4, this);
					return;
				}
			}
			
			private function openGazette(event:Event):void {
				stream = new FileStream();
				try {
					stream.open(file, FileMode.READ);
					gazetteer = stream.readObject();
					stream.close();
				} catch(e:IOError) {
					trace("gazetteer open error:" + e);
				}
				
				gazetteerLabel.text = file.name;
				
				// Open kit
				try {
					var path:String = file.nativePath.replace(file.name, "");	
					
					file = new File();
					path = 'file://' + path + gazetteer.kitURL;
					file.url = path;
					stream = new FileStream();
					stream.open(file, FileMode.READ);
					kit = stream.readObject();
					stream.close();
				} catch (error:IOError) {
					Alert.show("Kit open error", "Alert", 4, this);
					return;
				}
				
				kitNameLabel.text = file.name;
				applicationSchema = kit.applicationSchema;
				featureTypes = applicationSchema.featureTypes;
				
				featureTypeArray = new ArrayList();
				for each(var ffType:FeatureType in featureTypes) {
					if (!ffType.isAbstract) featureTypeArray.addItem(ffType);
				}
				
				fType = featureTypes[gazetteer.featureType.name] as FeatureType;
				featureTypeDropDown.selectedItem = fType;
				
				attributeTypeArray = fType.attributeTypes;
				
				geoNameType = gazetteer.geoNameType;
				positionType = gazetteer.positionType;
								
				geoNameLabel.text = geoNameType.name;
				positionLabel.text = positionType.name;
				
			}
						
						
			// Text and instruction  Controls
			protected function text_jp_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/jp/gazetteerDesigner_jp.html");
				navigateToURL(request);
			}
			
			protected function text_en_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/en/gazetteerDesigner_en.html");
				navigateToURL(request);
			}

		]]>
	</fx:Script>
	
	<s:Image x="10" y="7" source="@Embed(source='images/pictRepresentation1.png')" />
	<s:Label x="77" y="15" text="Gazetteer Designer" fontSize="16"/>
	
	<s:Label x="261" y="10" text="日本語" fontFamily="Osaka" color="#969696" fontSize="11"
			 buttonMode="true" click="text_jp_clickHandler(event)"/>
	<s:Label x="302" y="12" text="English" color="#969696"
			 buttonMode="true" click="text_en_clickHandler(event)"/>
	
	<s:Button id="openAPSButton" x="33" y="74" width="55" label="open"
			  click="openKitButton_clickHandler(event)"/>	
	<s:Label x="93" y="81" width="26" height="11" fontSize="12" text="Kit"/>
	<s:Label id="kitNameLabel" x="31" y="99" width="120" height="20" backgroundColor="#DADADA"
			 fontSize="11" verticalAlign="middle"/>	
	<s:DropDownList id="featureTypeDropDown" x="34" y="152" width="143"
					change="featureTypeDropDown_changeHandler(event)"
					dataProvider="{featureTypeArray}" fontSize="11" labelField="name"
					prompt="Select Type"></s:DropDownList>
	<s:Label x="33" y="133" fontSize="12" text="Feature Types"/>
	<s:DataGrid id="attributeGrid" x="32" y="230" width="302" dataProvider="{attributeTypeArray}"
				editable="false" requestedRowCount="4"
				click="attributeGrid_clickHandler(event)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn width="100" dataField="name" headerText="name" resizable="false"></s:GridColumn>
				<s:GridColumn width="150" dataField="dataType" headerText="data type"
							  resizable="false"></s:GridColumn>
				<s:GridColumn width="50" dataField="multiplicity" headerText="multi."></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Label x="32" y="215" fontSize="12" text="Attributes"/>
	<s:Label x="33" y="378" fontSize="12" text="Geographic name "/>
	<s:Label x="194" y="378" fontSize="12" text="Position"/>
	<s:HGroup x="31" y="186" width="302">
		<s:RadioButton id="geoNameRadio" label="Geographic name" groupName="radiogroup"/>
		<s:RadioButton id="positionRadio" label="Position" groupName="radiogroup"/>
	</s:HGroup>
	<s:Label id="geoNameLabel" x="32" y="394" width="140" height="20" backgroundColor="#DADADA"
			 verticalAlign="middle"/>
	<s:Label id="positionLabel" x="194" y="394" width="140" height="20" backgroundColor="#DADADA"
			 verticalAlign="middle"/>
	<s:Button id="saveGazetButton" x="194" y="74" width="55" height="20" label="save"
			  click="saveGazetButton_clickHandler(event)"/>
	<s:Label x="257" y="82" text="Gazetteer"/>
	<s:Label id="gazetteerLabel" x="194" y="99" width="139" height="20" backgroundColor="#DADADA"
			 verticalAlign="middle"/>
	
</s:Window>
