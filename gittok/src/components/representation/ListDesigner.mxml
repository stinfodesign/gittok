<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="450" height="362"
		  title="Cartographer &gt;&gt;" backgroundColor="#c5c5c5"
		  creationComplete="initializeApp()">

	<fx:Declarations>
		<!-- 非ビジュアルエレメント (サービス、値オブジェクトなど) をここに配置 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import coordinateReference.*;
			
			import dataTypes.place.*;
			import dataTypes.simpleDataTypes.*;
			import dataTypes.spatialGeometry.*;
			
			import gfm.*;
			
			import instanceModel.*;
			
			import math.*;
			
			import mx.controls.Alert;
			
			import portrayal.list.ListSchema;
			
			private var file:File;
			private var stream:FileStream = new FileStream();
			private var applicationSchemaFile:File;
			private var featureTypes:Dictionary = new Dictionary();
			private var listSchema:ListSchema;
			private var featureType:FeatureType;
			
			[Bindable]
			private var attributeTypes4List:ArrayList = new ArrayList();
			
			[Bindable]
			public var featureTypeArray:ArrayList = new ArrayList();
			
			[Bindable]
			public var attributeTypeArray:ArrayList = new ArrayList();

			protected function initializeApp():void {
				this.move(300, 400);
				
				// Basic Types
				registerClassAlias("dataTypes.simpleDataTypes.SimpleDataType", SimpleDataType);
				registerClassAlias("dataTypes.simpleDataTypes.Bool", Bool);
				registerClassAlias("dataTypes.simpleDataTypes.CharacterString", CharacterString);
				registerClassAlias("dataTypes.simpleDataTypes.Integer", Integer);
				registerClassAlias("dataTypes.simpleDataTypes.Real", Real);
				registerClassAlias("dataTypes.simpleDataTypes.Memo", Memo);
				
				// Geometry
				registerClassAlias("dataTypes.spatialGeometry.Coordinate2", Coordinate2);
				registerClassAlias("dataTypes.spatialGeometry.CoordinateArray", CoordinateArray);
				registerClassAlias("dataTypes.spatialGeometry.GeodeticCoordinate", GeodeticCoordinate);
				registerClassAlias("dataTypes.spatialGeometry.PlaneRectangularCoordinate", PlaneRectangularCoordinate);
				registerClassAlias("dataTypes.spatialGeometry.SG_Circle", SG_Circle);
				registerClassAlias("dataTypes.spatialGeometry.SG_Complex", SG_Complex);
				registerClassAlias("dataTypes.spatialGeometry.SG_Curve", SG_Curve);				
				registerClassAlias("dataTypes.spatialGeometry.SG_Object", SG_Object);				
				registerClassAlias("dataTypes.spatialGeometry.SG_OrientableCurve", SG_OrientableCurve);
				registerClassAlias("dataTypes.spatialGeometry.SG_Ring", SG_Ring);
				registerClassAlias("dataTypes.spatialGeometry.SG_Point", SG_Point);
				registerClassAlias("dataTypes.spatialGeometry.SG_Primitive", SG_Primitive);
				registerClassAlias("dataTypes.spatialGeometry.SG_Rectangle", SG_Rectangle);				
				registerClassAlias("dataTypes.spatialGeometry.SG_Surface", SG_Surface);
				
				// Location
				registerClassAlias("dataTypes.place.Address", Address);
				registerClassAlias("dataTypes.place.URL", URL);
				registerClassAlias("dataTypes.place.ImageURL", ImageURL);
				registerClassAlias("dataTypes.place.VideoURL", VideoURL);
				registerClassAlias("dataTypes.place.SoundURL", SoundURL);
				
				// General Feature Model
				registerClassAlias("gfm.AttributeType", AttributeType);
				registerClassAlias("gfm.OperationType", OperationType);
				registerClassAlias("gfm.FeatureType", FeatureType);
				registerClassAlias("gfm.AssociationType", AssociationType);
				registerClassAlias("gfm.ApplicationSchema", ApplicationSchema);	
				registerClassAlias("gfm.ArgAttPair", ArgAttPair);
				
				// Instance Model
				registerClassAlias("instanceModel.Kit", Kit);
				registerClassAlias("instanceModel.FeatureSet", FeatureSet);
				registerClassAlias("instanceModel.Feature", Feature);
				registerClassAlias("instanceModel.AssociationSet", AssociationSet);
				registerClassAlias("instanceModel.Association", Association);
				
				// File
				registerClassAlias("flash.filesystem.File", File);
				
				// Affine parameter
				registerClassAlias("math.AffineParam", AffineParam);
				
				//Coordinate ReferenceSystem
				registerClassAlias("coordinateReference.CRS", CRS);
				registerClassAlias("coordinateReference.Axis", Axis);
				registerClassAlias("coordinateReference.CoordinateSystem", CoordinateSystem);
				registerClassAlias("coordinateReference.Ellipsoid", Ellipsoid);
				registerClassAlias("coordinateReference.GeodeticDatum", GeodeticDatum);
				registerClassAlias("coordinateReference.PrimeMeridian", PrimeMeridian);
				registerClassAlias("coordinateReference.GaussKrugerProjection", GaussKrugerProjection);
				registerClassAlias("coordinateReference.PSOrigin", IdentifiedCoordinate);
				registerClassAlias("coordinateReference.VerticalDatum", VerticalDatum);	
				
				//List Schema
				registerClassAlias("portrayalSchema.list.ListSchema", ListSchema);	
				

			}
			
			protected function openAPSButton_clickHandler(event:MouseEvent):void
			{
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("ApplicationSchema File", "*.aps");
					file.addEventListener(Event.SELECT, openAps);
					file.browseForOpen("Open ApplicationSchema  [キャンセル: CANCEL, 選択: SELECT]", [filter]);
				} catch (error:IOError) {
					trace(error.message);
				}												
			}
			
			private function openAps(event:Event):void {
				var apps:ApplicationSchema = new ApplicationSchema();
				
				stream.open(file, FileMode.READ);
				
				apps = stream.readObject();
				featureTypes = apps.featureTypes;
				stream.close();
				applicationSchemaLabel.text = file.name;
				
				for each(var fType:FeatureType in featureTypes) {
					if (!fType.isAbstract) featureTypeArray.addItem(fType);
				}
				
				applicationSchemaFile = file;
				
				attributeTypes4List = new ArrayList();
			}			
			
			protected function featureTypeList_changeHandler(event:Event):void
			{
				var idx:int = featureTypeList.selectedIndex;
				if (idx < 0) return;
				
				featureType = featureTypeArray.getItemAt(idx) as FeatureType;		
				proxyLabel.text = featureType.proxyName;
				
				attributeTypeArray = featureType.attributeTypes;
			}
			
			protected function addAttributeButton_clickHandler(event:MouseEvent):void
			{
				var idx:int = attributeGrid.selectedIndex;
				if (idx < 0) {
					Alert.show("Select attribute before addition.", "Error", 4, this);
					return;
				}
				
				var atype:AttributeType = attributeTypeArray.getItemAt(idx) as AttributeType;
				
				if (proxyLabel.text == atype.name) {
					Alert.show("This is proxy.", "Error", 4, this);
					return;
				}

				for (var i:int = 0; i < attributeTypes4List.length; i++) {
					var watype:AttributeType = attributeTypes4List.getItemAt(i) as AttributeType;
					if (atype.name == watype.name) {
						Alert.show("Double selection", "Alert", 4, this);
						return;
					}
				}
				
				attributeTypes4List.addItem(atype);
			}
			
			protected function saveSchemaButton_clickHandler(event:MouseEvent):void
			{
				// Save list schema
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("List Schema", "*.lsc");
					file.addEventListener(Event.SELECT, saveFile);
					file.browseForSave("Save file");
					
				} catch (error:IOError) {
					Alert.show(error.message);
				} 
			}
			
			private function saveFile(event:Event):void {
				var startIndex:int = file.nativePath.length - 4;
				var suffix:String = file.nativePath.slice(startIndex);
				if (suffix != ".lsc") file.nativePath += ".lsc";
				
				listSchemaLabel.text = file.name;
				var stream:FileStream = new FileStream();
				
				stream.open(file, FileMode.WRITE);
				listSchema = new ListSchema(); 
				listSchema.applicationSchema = applicationSchemaFile.name;
				listSchema.featureType = featureType;
				listSchema.selectedAttributeTypes = attributeTypes4List;
				stream.writeObject(listSchema);
				stream.close();
			}
			
			protected function openListSchemaButton_clickHandler(event:MouseEvent):void
			{
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("List Schema", "*.lsc");
					file.addEventListener(Event.SELECT, openFile);
					file.browseForOpen("Open file  [キャンセル: CANCEL, 選択: SELECT]", [filter]);
				} catch (error:IOError) {
					trace(error.message);
				}
			}
			
			private function openFile(event:Event):void {
				listSchemaLabel.text = file.name;
				var url:String = file.url;
				var pathArray:Array = url.split("/");
				var path:String = "/";
				for (var i:int = 3; i < pathArray.length - 1; i++) {
					path += pathArray[i] + "/";
				}
				var stream:FileStream = new FileStream();
				
				applicationSchemaFile    = new File();
				
				try {
					stream.open(file,FileMode.READ);
					listSchema = stream.readObject();
					
					applicationSchemaFile.nativePath    = path + listSchema.applicationSchema;
					
				} catch (error:IOError) {
					trace(error.message);
				}
				
				applicationSchemaLabel.text = applicationSchemaFile.name;
				featureType = listSchema.featureType;
				attributeTypeArray = featureType.attributeTypes;
				attributeTypes4List = listSchema.selectedAttributeTypes;
				proxyLabel.text = featureType.name;
			}			
		]]>
	</fx:Script>
	
	<s:Image x="10" y="7" source="@Embed(source='images/pictRepresentation1.png')" />
	<s:Label x="77" y="15" text="List Schema Designer" fontSize="16"/>
	<s:Button id="openAPSButton" x="33" y="87" width="55" height="20" label="open"
			  click="openAPSButton_clickHandler(event)" fontSize="11"/>
	<s:Label x="94" y="86" width="71" height="28" fontSize="11" text="Application schema"/>
	<s:Label id="applicationSchemaLabel" x="33" y="114" width="120" height="20"
			 backgroundColor="#DADADA" verticalAlign="middle"/>
	<s:Label x="300" y="100" fontSize="11" text="Proxy"/>
	<s:Label id="proxyLabel" x="300" y="114" width="120" height="20" backgroundColor="#DADADA"
			 verticalAlign="middle"/>
	<s:Label x="33" y="153" fontSize="11" text="Attributes"/>
	<s:DataGrid id="attributeGrid" x="28" y="168" width="240" requestedRowCount="4" dataProvider="{attributeTypeArray}">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn width="100" dataField="name" headerText="name"></s:GridColumn>
				<s:GridColumn width="80" dataField="dataType" headerText="type"></s:GridColumn>
				<s:GridColumn width="60" dataField="multiplicity" headerText="multi."></s:GridColumn>
			</s:ArrayList>
		</s:columns>

	</s:DataGrid>
	<s:Label x="300" y="155" fontSize="11" text="Selected attributes"/>
	<s:List id="selectedAttributeList" x="300" y="169" width="120" 
			dataProvider="{attributeTypes4List}" labelField="name"></s:List>
	<s:Label x="172" y="100" fontSize="11" text="Feature types"/>
	<s:DropDownList id="featureTypeList" x="172" y="113" height="20" dataProvider="{featureTypeArray}"
					fontSize="11" prompt="Select type" labelField="name" change="featureTypeList_changeHandler(event)"></s:DropDownList>
	<s:Button id="addAttributeButton" x="300" y="291" width="55" height="20" label="add"
			  click="addAttributeButton_clickHandler(event)" fontSize="11"/>
	<s:Button x="365" y="291" width="55" height="20" label="delete" fontSize="11"/>
	<s:Button id="openListSchemaButton" x="251" y="34" width="55" height="20" label="open"
			  click="openListSchemaButton_clickHandler(event)" fontSize="11"/>
	<s:Button id="saveSchemaButton" x="314" y="34" width="55" height="20" label="save"
			  click="saveSchemaButton_clickHandler(event)" fontSize="11"/>
	<s:Label x="375" y="40" fontSize="11" text="List schema"/>
	<s:Label id="listSchemaLabel" x="252" y="62" width="168" height="20" backgroundColor="#DADADA"
			 verticalAlign="middle" maxDisplayedLines="1"/>

</s:Window>
