<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="480" height="434"
		  backgroundColor="#c5c5c5" 
		  title="Label Designer" 
		  creationComplete="initializeApp()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>


	<fx:Script>
		<![CDATA[
			import components.representation.ColorSelector;
			
			import flash.filesystem.*;
			
			import mx.controls.Alert;
			
			import portrayal.labelStyle.LabelStyle;
			import portrayal.labelStyle.LabelStyleDictionary;

			private var labelFile:File;
			
			private var labelStyleSchema:LabelStyleDictionary = new LabelStyleDictionary();
			
			private var lblStyleArray:ArrayList = new ArrayList();
			
			private var selectedColor:uint;
			private var selectedAlpha:Number;
			
			protected var colorSelector:ColorSelector;
			
			[Bindable]
			private var fontArray:ArrayList;

			
			public function initializeApp(): void {
				this.move(475,350);
				
				registerClassAlias("portrayal.labelStyle.LabelStyle", LabelStyle);
				registerClassAlias("portrayal.labelStyle.LabelStyleDictionary", LabelStyleDictionary);
				
				// Get all fonts in the computer
				var fonts:Array = Font.enumerateFonts(true);
				fontArray = new ArrayList();
				fonts.sortOn("fontName", Array.CASEINSENSITIVE);
				for(var j:int=0; j < fonts.length; j++){
					fontArray.addItem(fonts[j]);
				}				
				
			}
			
			protected function getFontbyName(fontName:String):Font {
				var ft:Font;
				var n:int = fontArray.length;
				for (var i:int = 0; i < n; i++) {
					ft = fontArray.getItemAt(i) as Font;
					if (ft.fontName == fontName) {
						return ft;
					}
				}
				return null;
			}

			
			protected function openLabelStylesButton_clickHandler(event:MouseEvent):void
			{
				try {
					labelFile = new File();
					var filter:FileFilter = new FileFilter("Label File", "*.lab");
					labelFile.addEventListener(Event.SELECT, openLabelFile);
					labelFile.browseForOpen("Open file", [filter]);
					labelFile.addEventListener(Event.CLOSING, labelFileClose);
				} catch (error:IOError) {
					Alert.show(error.message);
				}
			}
			
			protected function labelFileClose(event:Event):void {
			}			
			
			private function openLabelFile(event:Event):void {
				
				labelStylesLabel.text = labelFile.name;
				var labelStream:FileStream = new FileStream();
				labelStream.open(labelFile,FileMode.READ);
				labelStyleSchema = labelStream.readObject() as LabelStyleDictionary;
				
				for each (var lblStyle:LabelStyle in labelStyleSchema.labelStyles) {
					lblStyleArray.addItem(lblStyle);
				}
				
				labelStyleGrid.dataProvider = lblStyleArray;
			}
			
			protected function saveLabelStylesButton_clickHandler(event:MouseEvent):void
			{
				if (lblStyleArray.length == 0) {
					Alert.show("Set labels before save.", "Error", 4, this);
					return;
				}
				
				// Save instance set
				try {
					labelFile = new File();
					var filter:FileFilter = new FileFilter("Label File", "*.lab");
					labelFile.addEventListener(Event.SELECT, saveLabelFile);
					labelFile.browseForSave("Save file");
					labelFile.addEventListener(Event.CLOSING, saveFileClose);
					
				} catch (error:IOError) {
					Alert.show(error.message);
				} 
			}
			
			private function saveFileClose(event:Event):void {
			}
			
			private function saveLabelFile(event:Event):void {	
				var startIndex:int = labelFile.nativePath.length - 4;
				var suffix:String = labelFile.nativePath.slice(startIndex);
				if (suffix != ".lab") labelFile.nativePath += ".lab";
				
				
				labelStylesLabel.text = labelFile.name;
				labelStyleSchema.name = labelFile.name;
				var labelStream:FileStream = new FileStream();
				labelStream.open(labelFile, FileMode.WRITE);
				
				labelStream.writeObject(labelStyleSchema);
				labelStream.close();
			}



			protected function addButton_clickHandler(event:MouseEvent):void
			{
				
				var ls:LabelStyle = new LabelStyle();
				setLabelStyle(ls);
				labelStyleSchema.labelStyles[ls.name] = ls;
				
				lblStyleArray = new ArrayList();
				for each (var lblStyle:LabelStyle in labelStyleSchema.labelStyles) {
					lblStyleArray.addItem(lblStyle);
				}
				
				labelStyleGrid.dataProvider = lblStyleArray;

			}
			
			protected function setLabelStyle(ls:LabelStyle):void {
				ls.name = nameInput.text;
				if (ls.name == "") {
					Alert.show("Set font name before setting.", "Error", 4, this);
					return;							
				}
				
				var ft:Font = fontDropDown.selectedItem;
				if (ft == null) {
					Alert.show("Set font before setting.", "Error", 4, this);
					return;	
				}
				ls.font = ft.fontName;
				
				var fs:String = fontSizeInput.text;
				if (fs != "")
					ls.fontSize = Number(fs);
				else {
					Alert.show("Set font size before setting.", "Error", 4, this);
					return;							
				}
				
				ls.bold = (weightList.selectedItem == "bold") ? true: false;
				
				var refObj:Object = refGroup.selectedValue;
				if (refObj != null) 
					ls.reference = parseInt(refObj.toString());
				else {
					Alert.show("Set reference position before setting.", "Error", 4, this);
					return;					
				}
				
				ls.color = selectedColor;
				ls.alpla = selectedAlpha;
			}


			protected function showButton_clickHandler(event:MouseEvent):void
			{
				var ls:LabelStyle = new LabelStyle();
				ls.name = nameInput.text;
				var ft:Font = fontDropDown.selectedItem;
				ls.font = ft.fontName;
				ls.fontSize = Number(fontSizeInput.text);
				ls.color = selectedColor;
				ls.alpla = selectedAlpha;
				ls.bold = weightList.selectedItem;
				ls.reference = refGroup.selectedValue as int;
				
				showLabel(ls);
			}
			
			protected function editButton_clickHandler(event:MouseEvent):void
			{
				if (labelStyleGrid.selectedIndex == -1) {
					Alert.show("Select label style before edit.", "Error", 4, this);
					return;
				}
				
				var ls:LabelStyle = lblStyleArray.getItemAt(labelStyleGrid.selectedIndex) as LabelStyle;
				nameInput.text = ls.name;
				var ft:Font = this.getFontbyName(ls.font);
				var ftIndex:int = fontArray.getItemIndex(ft);
				fontDropDown.selectedIndex = ftIndex;
				fontSizeInput.text = ls.fontSize.toString();
				selectedColor = ls.color;
				selectedAlpha = ls.alpla;
				fillRect.color = selectedColor;
				fillRect.alpha = selectedAlpha;
				weightList.selectedItem = (ls.bold == true) ? "bold": "normal";
				var rd:RadioButton = refGroup.getRadioButtonAt(ls.reference);
				rd.selected = true;
				
				showLabel(ls);
			}
			
			protected function showLabel(ls:LabelStyle):void {
				testLabel.setStyle("fontFamily", ls.font);
				testLabel.setStyle("fontSize", ls.fontSize);
				testLabel.setStyle("color", ls.color);
				testLabel.setStyle("alpha", ls.alpla);
				testLabel.setStyle("fontWeight", (ls.bold == true) ? "bold" : "normal");
				
				testLabel.text = ls.font;			
			}


			protected function updateButton_clickHandler(event:MouseEvent):void
			{
				if (labelStyleGrid.selectedIndex == -1) {
					Alert.show("Select label style before update.", "Error", 4, this);
					return;
				}
				
				var i:int = labelStyleGrid.selectedIndex;
				var ls:LabelStyle = lblStyleArray.getItemAt(i) as LabelStyle;
				setLabelStyle(ls);
				labelStyleSchema.labelStyles[ls.name] = ls;						
			}

			protected function deleteButton_clickHandler(event:MouseEvent):void
			{
				if (labelStyleGrid.selectedIndex == -1) {
					Alert.show("Select label style before delete.", "Error", 4, this);
					return;
				}

				var i:int = labelStyleGrid.selectedIndex;
				var ls:LabelStyle = lblStyleArray.getItemAt(i) as LabelStyle;
				lblStyleArray.removeItemAt(i);
				delete labelStyleSchema.labelStyles[ls.name];							
			}
			
			// Text and instruction  Controls
			protected function text_jp_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/jp/labelStyleDesigner_jp.html");
				navigateToURL(request);
			}
			
			protected function text_en_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/en/labelStyleDesigner_en.html");
				navigateToURL(request);
			}
			


			protected function selectColorButton_clickHandler(event:MouseEvent):void
			{
				if (colorSelector == null) {
					colorSelector = new ColorSelector();
				}
				
				colorSelector.open();
				colorSelector.addEventListener(Event.CLOSE, setColor);
			}
			
			protected function setColor(event:Event):void {
				selectedColor = colorSelector.color;
				selectedAlpha = colorSelector.cAlpha;
				
				fillRect.alpha = selectedAlpha;
				fillRect.color = selectedColor;
				
				colorSelector = null;
			}
			
		]]>
	</fx:Script>
		
		<fx:Declarations>
			<s:RadioButtonGroup id="directionGroup"/>
			<s:RadioButtonGroup id="refGroup"/>
			<!-- 非ビジュアルエレメント (サービス、値オブジェクトなど) をここに配置 -->
		</fx:Declarations>
		<s:Image x="10" y="10" source="@Embed(source='images/pictRepresentation1.png')"/>
		<s:Label x="75" y="15" text="Label Style Designer" fontSize="16"/>
		<s:Label x="353" y="39" text="label style &#xd;dictionary"/>
		<s:Label x="292" y="69" id="labelStylesLabel" backgroundColor="#DADADA" width="135" height="20" 
				 verticalAlign="middle"/>
		<s:Button x="293" y="17" label="open" width="55" id="openLabelStylesButton" 
				  click="openLabelStylesButton_clickHandler(event)"/>
		<s:Button x="293" y="43" label="save" width="55" id="saveLabelStylesButton" 
				  click="saveLabelStylesButton_clickHandler(event)"/>
		<s:Label x="21" y="93" text="name"/>
		<s:Label x="21" y="123" text="font"/>
		<s:Label x="21" y="155" text="size"/>
		<s:Label x="21" y="196" text="color"/>
		<s:Label x="21" y="283" text="reference"/>
		<s:TextInput x="86" y="86" height="20" id="nameInput" width="140"/>
		<s:DropDownList x="86" y="117" width="140" height="20" 
						id="fontDropDown" fontSize="10" 
						dataProvider="{fontArray}" labelField="fontName"/>
		<s:RadioButton x="84" y="280" label="0" groupName="refGroup" id="r0"/>
		<s:RadioButton x="142" y="280" label="1" groupName="refGroup" id="r1"/>
		<s:RadioButton x="200" y="280" label="2" groupName="refGroup" id="r2"/>
		<s:RadioButton x="84" y="315" label="3" groupName="refGroup" id="r3"/>
		<s:RadioButton x="142" y="315" label="4" groupName="refGroup" id="r4"/>
		<s:RadioButton x="200" y="315" label="5" groupName="refGroup" id="r5"/>
		<s:RadioButton x="84" y="351" label="6" groupName="refGroup" id="r6"/>
		<s:RadioButton x="142" y="351" label="7" groupName="refGroup" id="r7"/>
		<s:RadioButton x="200" y="351" label="8" groupName="refGroup" id="r8"/>
		<mx:DataGrid x="259" y="233" width="101" id="labelStyleGrid" height="147">
			<mx:columns>
				<mx:DataGridColumn headerText="label" dataField="name"/>
			</mx:columns>
		</mx:DataGrid>
		<s:Button x="367" y="233" label="add" id="addButton" width="60" height="20" click="addButton_clickHandler(event)"/>
		<s:Button x="367" y="289" label="update" width="60" height="20" id="updateButton" click="updateButton_clickHandler(event)"/>
		<s:Button x="263" y="104" label="show" width="60" height="20" id="showButton" click="showButton_clickHandler(event)"/>
		<s:Rect x="256" y="134" width="171" height="91">
			<s:fill>
				<s:SolidColor color="0xffffff"/>
			</s:fill>
		</s:Rect>
		<s:Label x="262" y="140" text="Sample font" id="testLabel" />
		<s:TextInput x="86" y="151" width="50" id="fontSizeInput" height="20"/>
	<s:Button x="367" y="261" label="edit" id="editButton" width="60" height="20" click="editButton_clickHandler(event)"/>
	<s:Button x="367" y="316" label="delete" id="deleteButton" width="60" height="20" click="deleteButton_clickHandler(event)"/>
	<s:Label x="21" y="235" text="weight"/>
	<s:DropDownList x="85" y="230" height="20" width="140" id="weightList">
		<s:dataProvider>
			<s:ArrayList>
				<fx:String>normal</fx:String>
				<fx:String>bold</fx:String>
			</s:ArrayList>
		</s:dataProvider>	
	</s:DropDownList>
	<s:Label x="387" y="10" text="日本語" fontFamily="Osaka" color="#969696" fontSize="11"
			 buttonMode="true" click="text_jp_clickHandler(event)"/>
	<s:Label x="428" y="12" text="English" color="#969696"
			 buttonMode="true" click="text_en_clickHandler(event)"/>
	<s:Rect x="86" y="176" width="141" height="50">
		<s:fill>
			<s:SolidColor color="0xffffff"/>
		</s:fill>
	</s:Rect>
	<s:Rect id="colorRect" x="92" y="182" width="128" height="38">
		<s:fill>
			<s:SolidColor id="fillRect" color="0xdadada"/>
		</s:fill>
	</s:Rect>
	<s:Button id="selectColorButton" x="98" y="193" width="50" height="16" label="select"
			  click="selectColorButton_clickHandler(event)" fontSize="11"/>

</s:Window>
