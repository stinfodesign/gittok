<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="608" height="728"
		  title="Map Editor"
		  creationComplete="initializeApp()">

	<fx:Script>
		<![CDATA[
			
			import com.google.maps.Map;
			
			import dataTypes.place.*;
			import dataTypes.spatialGeometry.*;
			import dataTypes.theme.*;
			
			import flash.filesystem.*;
			import flash.geom.Point;
			import flash.text.TextField;
			import flash.text.TextFormat;
			
			import flashx.textLayout.formats.Float;
			
			import geoOperations.*;
			
			import gfm.*;
			
			import instanceModel.*;
			
			import locationReference.*;
			
			import math.*;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.Image;
			
			import portrayal.gpm.*;
			import portrayal.label.Label;
			import portrayal.labelStyle.*;
			import portrayal.map.*;
			import portrayal.symbol.*;
			import portrayal.symbolStyle.*;
			
			import spark.events.IndexChangeEvent;
			
			private var file:File;
			private var stream:FileStream;
			private var portrayalSchemaFile:File;
			
			public var kit:Kit;
			protected var kitURL:String;
			protected var kitFileName:String;
			protected var kitCenter:Coordinate2;
			protected var kitExtent:Coordinate2;
			protected var applicationSchema:ApplicationSchema;
			
			private var concreteTypes:ArrayList;
			private var concreteAssociationTypes:ArrayList;
			
			private var feature:Feature;
			private var featureSet:FeatureSet;
			private var featureSetArray:Dictionary;
			private var associationSetArray:Dictionary;
			
			private var syms:SymbolStyleDictionary;			
			private var labels:LabelStyleDictionary;
			private var portrayals:PortrayalSchema;
			private var fpUnits:Dictionary = new Dictionary();
			private var fpUnit:FeaturePortrayalUnit = new FeaturePortrayalUnit();
			
			private var curve:SG_Curve;
			private var surface:SG_Surface;
			
			protected var atts:ArrayList;	// attributeTypes, variable using for recursive process	
			protected var assos:ArrayList;	// associationTypes
			protected var opts:ArrayList;	// operationTypes
			
			private var origin:Coordinate2;
			private var scale:Number = 1.0;
			private var dragFlag:Boolean = false;
			private var clickFlag:Boolean   = false;
			private var initialLength:int = 200;
			private var selectedLabel:portrayal.label.Label;
			
			private var map:portrayal.map.Map;
			private var maintitle:Title;
			private var subtitle:Title;
			private var northArrow:NorthArrow;
			private var legend:MapLegend;
			private var barScale:BarScale;
			private var affineParam:AffineParam;
			
			// multimedia attibutes
			private var picts:Array = new Array(6);
			private var multimediaType:Array = ["Memo", "URL", "ImageURL", "VideoURL", "SoundURL", "Address", "SimpleType"];
			private var foundFlag:Boolean = false;
			private var pictPushedFlag:Boolean = false;
			private var selectedFeature:Feature;
			private var selectedAttArray:ArrayList;
			
			// attribute list windows
			public var memoViewer:MemoViewer;
			public var websiteViewer:WebsiteViewer;
			public var imageViewer:ImageViewer;
			public var videoViewer:VideoViewer;
			public var soundListener:SoundListener;
			public var addressViewer:AddressViewer;
			public var simpleDataViewer:SimpleDataViewer;

			// define marginal parameters
			protected  var colorSelector:ColorSelector;
			
			// Gazetteer
			private var gazette:Gazetteer;
			public var gazetteerWindow:GazetteerViewer;
			private var oldOrigin:Coordinate2 = new Coordinate2();
			
			// Dragging
			private var dragged:Boolean = false;
			private var jumped:Boolean = false;
			
			[Bindable]
			protected var mapBackground:uint;
			protected var mapBackgroundAlpha:Number;
			
			public var titleEditor:TitleEditor;
			public var northArrowSelector:NorthArrowSelector;
			protected var movingLayer:String;
			
			[Bindable]
			private var thematicProvider:ArrayList;
			
			[Bindable]
			private var arrowSource:String;
			
			[Bindable]
			private var scaleSizeText:String;
			
			[Bindable]
			private var scaleLabelPos:Number;
			
			[Bindable]
			private var featureTypesArray:ArrayList;

			
			public function initializeApp(): void {
				this.move(400, 50);
				// Basic Types
				registerClassAlias("dataTypes.simpleDataTypes.SimpleDataType", ThematicDataType);
				registerClassAlias("dataTypes.simpleDataTypes.Bool", Bool);
				registerClassAlias("dataTypes.simpleDataTypes.CharacterString", CharacterString);
				registerClassAlias("dataTypes.simpleDataTypes.Integer", Integer);
				registerClassAlias("dataTypes.simpleDataTypes.Real", Real);
				registerClassAlias("dataTypes.simpleDataTypes.Memo", Memo);
				
				// Location
				registerClassAlias("dataTypes.place.ImageURL", ImageURL);
				registerClassAlias("dataTypes.place.URL", URL);
				registerClassAlias("dataTypes.place.VideoURL", VideoURL);
				registerClassAlias("dataTypes.place.SoundURL", SoundURL);
				registerClassAlias("dataTypes.place.Address", Address);
				
				// General Feature Model
				registerClassAlias("gfm.AttributeType", AttributeType);
				registerClassAlias("gfm.OperationType", OperationType);
				registerClassAlias("gfm.FeatureType", FeatureType);
				registerClassAlias("gfm.AssociationType", AssociationType);
				registerClassAlias("gfm.ApplicationSchema", ApplicationSchema);	
				registerClassAlias("gfm.ArgAttPair", ArgAttPair);
				
				// Instance Model
				registerClassAlias("instanceModel.Kit", Kit);
				registerClassAlias("instanceModel.FeatureSet", FeatureSet);
				registerClassAlias("instanceModel.Feature", Feature);
				registerClassAlias("instanceModel.Association", Association);
				registerClassAlias("instanceModel.AssociationSet", AssociationSet);
				
				// Symbol styles
				registerClassAlias("portrayal.symbolStyle.PointSymbolStyle", PointSymbolStyle);
				registerClassAlias("portrayal.symbolStyle.LineSymbolStyle", LineSymbolStyle);
				registerClassAlias("portrayal.symbolStyle.AreaSymbolStyle", AreaSymbolStyle);
				registerClassAlias("portrayal.symbolStyle.CircleSymbolStyle", CircleSymbolStyle);
				registerClassAlias("portrayal.symbolStyle.SymbolStyleDictionary", SymbolStyleDictionary);
				registerClassAlias("portrayal.symbolStyle.SymbolStyle", SymbolStyle);
				
				// Label Styles
				registerClassAlias("portrayal.labelStyle.LabelStyle", LabelStyle);
				registerClassAlias("portrayal.labelStyle.LabelStyleDictionary", LabelStyleDictionary);
				
				// Portrayal Schema
				registerClassAlias("portrayal.portrayalStyle.AttributeStylePair", AttributeStylePair);
				registerClassAlias("portrayal.portrayalStyle.AttributeSymbolPair", AttributeSymbolPair);
				registerClassAlias("portrayal.portrayalStyle.AttributeLabelPair", AttributeLabelPair);				
				registerClassAlias("portrayal.portrayalStyle.FeaturePortrayalUnit", FeaturePortrayalUnit);								
				registerClassAlias("portrayal.portrayalStyle.PortrayalSchema", PortrayalSchema);
				registerClassAlias("portrayal.portrayalStyle.ConditionElement", ConditionElement);
				registerClassAlias("portrayal.portrayalStyle.ThematicCondition", ThematicCondition);
				registerClassAlias("portrayal.portrayalStyle.Modifier", Modifier);
				registerClassAlias("portrayal.portrayalStyle.BooleanModifier", BooleanModifier);				
				registerClassAlias("portrayal.portrayalStyle.QualitativeModifier", QualitativeModifier);				
				registerClassAlias("portrayal.portrayalStyle.QuantitativeModifier", QuantitativeModifier);
				
				// Symbol
				registerClassAlias("portrayal.symbol.AreaSymbol", AreaSymbol);				
				registerClassAlias("portrayal.symbol.LineSymbol", LineSymbol);
				registerClassAlias("portrayal.symbol.PointSymbol", PointSymbol);		
				registerClassAlias("portrayal.symbol.Circle", Circle);	
				
				// Label
				registerClassAlias("portrayal.label.Label", portrayal.label.Label);				
				
				// Map
				registerClassAlias("portrayal.map.Map", portrayal.map.Map);
				registerClassAlias("portrayal.map.MapLegend", MapLegend);
				registerClassAlias("portrayal.map.MapLegendParam", MapLegendParam);
				registerClassAlias("portrayal.map.NorthArrow", NorthArrow);
				registerClassAlias("portrayal.map.BarScale", BarScale);
				registerClassAlias("portrayal.map.Title", Title);
				
				// Geometry
				registerClassAlias("dataTypes.spatialGeometry.SG_Point", SG_Point);
				registerClassAlias("dataTypes.spatialGeometry.SG_Curve", SG_Curve);
				registerClassAlias("dataTypes.spatialGeometry.SG_Surface", SG_Surface);
				registerClassAlias("dataTypes.spatialGeometry.SG_OrientableCurve", SG_OrientableCurve);
				registerClassAlias("dataTypes.spatialGeometry.SG_Primitive", SG_Primitive);
				registerClassAlias("dataTypes.spatialGeometry.SG_Rectangle", SG_Rectangle);
				registerClassAlias("dataTypes.spatialGeometry.SG_Ring", SG_Ring);
				registerClassAlias("dataTypes.spatialGeometry.SG_Complex", SG_Complex);
				registerClassAlias("dataTypes.spatialGeometry.Coordinate2", Coordinate2);
				registerClassAlias("dataTypes.spatialGeometry.CoordinateArray", CoordinateArray);
				registerClassAlias("dataTypes.spatialGeometry.SG_Circle", SG_Circle);
				
				// Affine
				registerClassAlias("math.AffineParam", AffineParam);
				
				// Gazetteer
				registerClassAlias("locationReference.LocationInstance", LocationInstance);
				registerClassAlias("locationReference.Gazetteer", Gazetteer);
				
				scaleSpace.visible  = false;
				
				mapBackground = 0xffffff;
				mapBackgroundAlpha = 1.0;
				
				this.addEventListener(Event.CLOSE, mapEditorClose);
			}
			
			protected function mapEditorClose(event:Event): void {
				
				if (this.gazetteerWindow	!= null)	this.gazetteerWindow.close();
				if (this.videoViewer 		!= null)	this.videoViewer.close();
				if (this.memoViewer 		!= null) 	this.memoViewer.close();				
				if (this.websiteViewer 		!= null) 	this.websiteViewer.close();
				if (this.imageViewer 		!= null) 	this.imageViewer.close();
				if (this.soundListener 		!= null) 	this.soundListener.close();
				if (this.addressViewer 		!= null) 	this.addressViewer.close();
				if (this.simpleDataViewer	!= null)	this.simpleDataViewer.close();
				
				if (this.titleEditor		!= null)	this.titleEditor.close();
				if (this.northArrowSelector	!= null)	this.northArrowSelector.close();
				if (this.colorSelector		!= null)	this.colorSelector.close();

			}
			
			//Open Kit 			
			public function openKitButton_clickHandler(event:MouseEvent):void
			{
				// Open kit
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("Kit File", "*.kit");
					file.addEventListener(Event.SELECT, openKit);
					file.browseForOpen("Open kit file", [filter]);
					
				} catch (error:IOError) {
					Alert.show(error.message);
				}
			}
			
			public function openKit(event:Event):void {
				this.setKitOpened();
				this.setKitParameters();
			}
			
			public function setKitOpened():void {
				stream = new FileStream();
				try {
					stream.open(file, FileMode.READ);
					kit = stream.readObject() as Kit;
					stream.close();
				} catch(e:IOError) {
					Alert.show("kit open error:" + e, "Alert", 4, this);
				}
				
				kitFileName = file.name;
				
				//display name of the kit file.
				kitNameLabel.text = file.name;
				
				//Open application schema
				var pathURL:String = file.url;
				var pathArray:Array = pathURL.split("/");
				kitURL = "";
				for (var i:int = 0; i < pathArray.length - 1; i++) {
					kitURL += pathArray[i] + "/";
				}
				
				kit.applicationSchema = openApplicationSchema(kitURL, kit.applicationSchemaURL);
			}
			
			private function openApplicationSchema(_kitURL:String, _appURL:String):ApplicationSchema {
				var appStream:FileStream = new FileStream();
				var appSchema:ApplicationSchema;
				var apsURL:String = _kitURL + _appURL;
				file = new File();
				file.url = apsURL;
				try {
					appStream.open(file, FileMode.READ);
					appSchema = appStream.readObject();
					appStream.close();
				} catch(e:IOError) {
					Alert.show("application schema open error:" + e, "Alert", 4, this);
				}
				
				// make concrete types
				var fTypes:Dictionary = new Dictionary();
				var concreteTypes:ArrayList = appSchema.constructConcreteTypes();
				var cType:FeatureType;
				for (var i:int = 0; i < concreteTypes.length; i++) {
					cType = concreteTypes.getItemAt(i) as FeatureType;
					fTypes[cType.name] = cType;
				}
				appSchema.featureTypes = fTypes;
				
				return appSchema;
				
			}
			
			public function setKitParameters():void {
				//set affine paramters
				affineParam = kit.affineParam;
				
				//Initialize concrete (non abstract) types
				concreteTypes = new ArrayList();
				for each(var ftType:FeatureType in kit.applicationSchema.featureTypes) {				
					if (!ftType.isAbstract) 
						concreteTypes.addItem(ftType);
				}
				
				//Inherit properties from parent types, if required.
				var n:int = concreteTypes.length;
				var concreteType:FeatureType;
				for (var i:int = 0; i < n; i++) {
					atts 	= new ArrayList();
					opts 	= new ArrayList();
					concreteType = concreteTypes.getItemAt(i) as FeatureType;
					if (!concreteType.isAbstract) {
						// collect attrubute and association types
						atts.addAll(concreteType.attributeTypes);
						opts.addAll(concreteType.operationTypes);
						if (concreteType.parent != null) inheritProperties(concreteType.parent);
						concreteType = concreteTypes.getItemAt(i) as FeatureType;
						concreteType.attributeTypes = atts;
						concreteType.operationTypes = opts;
						concreteTypes.setItemAt(concreteType, i);
					}
				}
				
				//Set association type list
				concreteAssociationTypes = new ArrayList();
				for each(var aType:AssociationType in kit.applicationSchema.associationTypes) {
					concreteAssociationTypes.addItem(aType);
				}
				
				//Set feature instance
				featureSetArray = kit.featureSetArray;
				
				//Set association instance
				associationSetArray = kit.associationSetArray;
							
				origin = kit.getCenter();
				
				if (map == null) resetView();
				
			}
			
			// Recursive operation to inherit properties
			protected function inheritProperties(fType:FeatureType):void {
				var m:int = fType.attributeTypes.length;
				var n:int = atts.length;
				var watts:ArrayList = new ArrayList();
				for (var i:int = 0; i < m; i++) {
					var wattf:AttributeType = fType.attributeTypes.getItemAt(i) as AttributeType;
					var flag:Boolean = false;
					for (var j:int = 0; j < n; j++) {
						var watt:AttributeType = atts.getItemAt(j) as AttributeType;
						if (watt.name == wattf.name) flag = true;
					}
					if (!flag) watts.addItem(wattf);
				}
				atts.addAll(watts);
				
				m = fType.operationTypes.length;
				n = opts.length;
				var wopts:ArrayList = new ArrayList();
				for (i = 0; i < m; i++) {
					var woptf:OperationType = fType.operationTypes.getItemAt(i) as OperationType;
					flag = false;
					for (j = 0; j < n; j++) {
						var wopt:OperationType = opts.getItemAt(j) as OperationType;
						if (wopt.name == woptf.name) flag = true;
					}
					if (!flag) wopts.addItem(woptf);
				}
				
				opts.addAll(wopts);
				
				if (fType.parent != null) {
					inheritProperties(fType.parent);
				}
			}
			
			private function resetView():void {
				var ctr:Coordinate2 = new Coordinate2();
				mappingBox.width  = mappingMainBox.width;
				mappingBox.height = mappingMainBox.height;
				ctr.x = mappingBox.width  * 0.5;
				ctr.y = mappingBox.height * 0.5;
				
				// Get extent and scale on the screen
				var extent:SG_Rectangle = kit.getGeographicExtent();
				var horizon:Number  = extent.upperRight.x - extent.lowerLeft.x;
				var vertical:Number = extent.upperRight.y - extent.lowerLeft.y;
				
				kitExtent = new Coordinate2();
				kitExtent.x = horizon;
				kitExtent.y = vertical;
				
				var kitSize:Number = (horizon > vertical) ? horizon : vertical;
				var mapSize:Number = (mappingBox.width > mappingBox.height) ? mappingBox.width : mappingBox.height;
				
				scale = mapSize / kitSize;
				
				kitExtent.x = kitExtent.x * scale;
				kitExtent.y = kitExtent.y * scale;
				
				kitCenter = kit.getCenter();
				
				var center:Coordinate2 = new Coordinate2();
				center.x = kitCenter.x * scale;
				center.y = kitCenter.y * scale;

				drawingSpace.scaleX = drawingSpace.scaleY = scale;
				
				drawingSpace.width  = mappingBox.width;
				drawingSpace.height = mappingBox.height;
								
				drawingSpace.x = ctr.x - center.x;
				drawingSpace.y = ctr.y - center.y;		
				
				oldOrigin.x = drawingSpace.x;
				oldOrigin.y = drawingSpace.y;

				//Draw a map scale
				barScale = new BarScale();
				barScale.drawScale(kit.affineParam, scale);
				if (scaleSpace.numChildren > 0) scaleSpace.removeChildAt(0);
				scaleSpace.addChild(barScale);
			}
			
			protected function openportrayalSchemaButton_clickHandler(event:MouseEvent):void
			{
				if (kit == null) {
					Alert.show("Open kit before portrayal schema.", "Alert", 4, this);
					return;					
				}
				
				try {
					portrayalSchemaFile = new File();
					var filter:FileFilter = new FileFilter("Portrayal Schema", "*.psc");
					portrayalSchemaFile.addEventListener(Event.SELECT, openPortrayalFiles);
					portrayalSchemaFile.browseForOpen("Open file", [filter]);
				} catch (error:IOError) {
					Alert.show(error.message, "Alert", 4, this);
				}
			}
			
			private function openPortrayalFiles(event:Event):void {
				
				var path:String = portrayalSchemaFile.nativePath.replace(portrayalSchemaFile.name, "");
				portrayalSchemaLabel.text = portrayalSchemaFile.name;
				stream = new FileStream();
				var appSchemaFile:File    = new File();
				var symbolStyleDicFile:File = new File();
				var labelStyleDicFile:File  = new File();
				
				try {
					stream.open(portrayalSchemaFile,FileMode.READ);
					portrayals = stream.readObject() as PortrayalSchema;
					appSchemaFile.nativePath    = path + portrayals.applicationSchema;
					symbolStyleDicFile.nativePath = path + portrayals.symbolStyleDictionary;
					labelStyleDicFile.nativePath  = path + portrayals.labelStyleDictionary;				
					fpUnits = portrayals.fpUnits;
					stream.close();
					
					stream.open(symbolStyleDicFile, FileMode.READ);
					syms = stream.readObject();		// symbol schema				
					stream.close();
					
					stream.open(labelStyleDicFile, FileMode.READ);
					labels = stream.readObject();	// label schema
					stream.close();
					
					featureTypesArray = new ArrayList();
					
					for each (var fpUnit:FeaturePortrayalUnit in  portrayals.fpUnits) {
						featureTypesArray.addItem(fpUnit.featureTypeID);
					}
					
				} catch (error:IOError) {
					Alert.show(error.message, "ALert", 4, this);
					return;
				}
				
				this.drawMap();
			}
			
			protected function drawMap():void {
				if (kit == null || portrayals == null) return;
				
				// draw bar scale
				scaleSpace.visible  = true;
				barScale = new BarScale();
				barScale.drawScale(kit.affineParam, scale);
				scaleSpace.removeChildAt(0);
				scaleSpace.addChild(barScale);
								
				// reset work space
				var num:int = labelSpace.numChildren;
				for (var j:int = 0; j < num; j++) labelSpace.removeChildAt(0);
				num = symbolSpace.numChildren;
				for (j = 0; j < num; j++) symbolSpace.removeChildAt(0);
				
				// re-open portrayalSchema file for acceptance of new portrayals
				//this.openPortrayalFiles(null);
				
				//Set feature instance
				featureSetArray = kit.featureSetArray;
				
				//Set association instance
				//associationSetArray = kit.associationSetArray;
				
				thematicProvider = new ArrayList();
				
				//for each(featureSet in featureSetArray) {
				for (var k:int = 0; k < portrayals.representationOrder.length; k++) {
					fpUnit = fpUnits[portrayals.representationOrder.getItemAt(k) as String] as FeaturePortrayalUnit;
					//fpUnit = fpUnits[featureSet.typeID] as FeaturePortrayalUnit;
					if (fpUnit != null) {
						var thematicModifier:ThematicCondition = fpUnit.thematicModifier;
						
						if (thematicModifier != null) {
							// set Legend on the map
							this.makeLegend(thematicModifier);
						}

						var fType:FeatureType = kit.applicationSchema.featureTypes[fpUnit.featureTypeID] as FeatureType;							
						
						// attribute type
						var attributeTypes:ArrayList = fType.attributeTypes;
						
						// draw graphics
						featureSet = featureSetArray[fType.name] as FeatureSet;
						var refGeom:SG_Primitive;
						for each(feature in featureSet.features) {
							var attributes:Dictionary = feature.attributes;
							
							for each(var primitiveList:ArrayList in attributes) {
								var primi:* = primitiveList.getItemAt(0);
								if (primi is SG_Primitive) {
									refGeom = primi as SG_Primitive;
							
									/* thematic mapping
									*/							
									if (thematicModifier != null) {
										var attArray:ArrayList = attributes[thematicModifier.attName] as ArrayList;
										var modifierType:String = thematicModifier.attType;
										if (modifierType == "Bool") {
											if (attArray == null) {
												var bm:BooleanModifier = thematicModifier.elements.getItemAt(2) as BooleanModifier;
												if (!bm.hasValue) {
													var m:int = primitiveList.length;
													for (var i:int = 0; i < m; i++) {
														refGeom = primitiveList.getItemAt(i) as SG_Primitive;	
														this.drawSymbol(bm.symName, refGeom);
													}											
												}
											}
											else {
												var attBool:Bool = attArray.getItemAt(0) as Bool;
												if (attBool.value) {
													bm = thematicModifier.elements.getItemAt(0) as BooleanModifier;
													if (bm != null) {
														m = primitiveList.length;
														for (i = 0; i < m; i++) {
															refGeom = primitiveList.getItemAt(i) as SG_Primitive;	
															this.drawSymbol(bm.symName, refGeom);
														}
													}
												}
												else {
													bm = thematicModifier.elements.getItemAt(1) as BooleanModifier;
													if (bm != null) {
														m = primitiveList.length;
														for (i = 0; i < m; i++) {
															refGeom = primitiveList.getItemAt(i) as SG_Primitive;	
															this.drawSymbol(bm.symName, refGeom);
														}
													}
												}
											}
										}	
										else if (modifierType == "CharacterString") {
											var attString:CharacterString = attArray.getItemAt(0) as CharacterString;
											var stringModifiers:ArrayList = thematicModifier.elements;
											m = stringModifiers.length;
											for (i = 0; i < m; i++) {
												var sm:QualitativeModifier = stringModifiers.getItemAt(i) as QualitativeModifier;
												if (sm.stringValue != null) {
													if (attString.value == sm.stringValue) {
														m = primitiveList.length;
														for (j = 0; j < m; j++) {
															refGeom = primitiveList.getItemAt(j) as SG_Primitive;	
															this.drawSymbol(sm.symName, refGeom);
														}											
													}
												}
											}
										}
									
										else if (modifierType == "Integer" || modifierType == "Real") {
											var attNumber:Number;
											if (modifierType == "Integer") {
												var attInteger:Integer = attArray.getItemAt(0) as Integer;
												attNumber = attInteger.value;
											}
											else {
												var attReal:Real = attArray.getItemAt(0) as Real;
												attNumber = attReal.value;
											}
											var numberModifiers:ArrayList = thematicModifier.elements;
											m = numberModifiers.length;
											for (i = 0; i < m; i++) {
												var nm:QuantitativeModifier = numberModifiers.getItemAt(i) as QuantitativeModifier;
												if (nm !=  null) {
													var lower:Number = Number(nm.lowerValue);
													var upper:Number = Number(nm.upperValue);
											 		if (lower <= attNumber && attNumber < upper) {
														for (j = 0; j < primitiveList.length; j++) {
															refGeom = primitiveList.getItemAt(j) as SG_Primitive;	
															this.drawSymbol(nm.symName, refGeom);
														}
													}
												}
											}
										}
									}
							
									/* general mapping
									*/
									if (fpUnit.generalModifiers != null) {
										for (i = 0; i < attributeTypes.length; i++) {
											var attType:AttributeType = attributeTypes.getItemAt(i) as AttributeType;
											if (refGeom.attributeName.getItemIndex(attType.name) > -1) {
												var attValueList:ArrayList = attributes[attType.name];
												if (attValueList != null) {
													var asPair:AttributeSymbolPair = fpUnit.generalModifiers[attType.name] as AttributeSymbolPair;
													if (asPair != null) {
														if (asPair.symName != "") {
															if (asPair.symType == "Point" || asPair.symType == "Line" || asPair.symType == "Area")
																this.drawSymbol(asPair.symName, refGeom);
														}
													}
												}
											}
										}
									}
								}
							}
						}
						
						for each(feature in featureSet.features) {
							// Labeling
							attributes = feature.attributes;
							if (fpUnit.generalModifiers != null) {
								for (i = 0; i < attributeTypes.length; i++) {
									attType = attributeTypes.getItemAt(i) as AttributeType;
									var alPair:AttributeLabelPair = fpUnit.generalModifiers[attType.name] as AttributeLabelPair;
									if (alPair != null) {
										attValueList = attributes[attType.name] as ArrayList;
										var refGeomArray:ArrayList = attributes[alPair.refGeomAttName] as ArrayList;
										if (refGeomArray != null)
										drawLabel(attValueList, alPair.labelName, refGeomArray.getItemAt(0) as SG_Primitive);
									}
								}
							}							
						}												
					}
				}
			}
			
			protected function makeLegend(thematicModifier:ThematicCondition):void {
				// legend setting
				var mType:String = thematicModifier.attType;
				
				legend = new MapLegend();
				legend.setTitle(thematicModifier.attName);
				var element:Object;
				if (mType == "Bool") {					
					for (var j:int = 0; j < 3; j++) {
						var bElement:BooleanModifier = thematicModifier.elements.getItemAt(j) as BooleanModifier;
						var areaSymbolStyle:AreaSymbolStyle = syms.areaSymStyles[bElement.symName] as AreaSymbolStyle;
						var bValue:String;
						if (bElement.hasValue)
							bValue = bElement.boolValue.toString();
						else
							bValue = "null";
						element = legend.addLine(areaSymbolStyle.color, areaSymbolStyle.alpha, bValue);
						legend.param.elements.addItem(element);
					}
				}
				else if (mType == "CharacterString") {
					var m:int = thematicModifier.elements.length;
					for (j = 0; j < m; j++) {
						var qlElement:QualitativeModifier = thematicModifier.elements.getItemAt(j) as QualitativeModifier;
						if (qlElement.stringValue != null) {
							areaSymbolStyle  = syms.areaSymStyles[qlElement.symName] as AreaSymbolStyle;
							
							element = legend.addLine(areaSymbolStyle.color, areaSymbolStyle.alpha, qlElement.stringValue);
							legend.param.elements.addItem(element);
						}
					}
				}
				else if (mType == "Integer" || mType == "Real") {
					m = thematicModifier.elements.length;
					for (j = 0; j < m; j++) {
						var  qnElement:QuantitativeModifier = thematicModifier.elements.getItemAt(j) as QuantitativeModifier;
						if (!isNaN(qnElement.lowerValue)) {
							areaSymbolStyle  = syms.areaSymStyles[qnElement.symName] as AreaSymbolStyle;
							
							var str:String = "" + qnElement.lowerValue + " ≤ x < " + qnElement.upperValue;
							
							element = legend.addLine(areaSymbolStyle.color, areaSymbolStyle.alpha, str);
							legend.param.elements.addItem(element);
						}
					}
				}
				
				if (legendSpace.numChildren > 0) legendSpace.removeChildAt(0); // remove old legend
				legendSpace.addChild(legend);
			}
			
			protected function drawLabel(attValueList:ArrayList, labelName:String, refGeom:SG_Primitive):void {
				if (attValueList == null) return;
				
				if (refGeom == null) {
					Alert.show("No reference point is selected.", "Alert", 4, this);
					return;
				}
				
				var objArray:ArrayList = new ArrayList();
				var obj:Object = new Object();
				// Get reference position
				var rPos:Coordinate2;
				
				if (refGeom is SG_Point) {
					var point:SG_Point = refGeom as SG_Point;
					rPos = point.position;
				}
				
				if (refGeom is SG_Curve) {
					curve = refGeom as SG_Curve;
					var attValue:ArrayList = new ArrayList();
					attValue.addItem(curve);
					var attValues:ArrayList = new ArrayList();
					attValues.addItem(attValue);
					var argObj:Object = new Object();
					argObj["curve"] = attValues;
					rPos = geoOperations.Center.centerLayingOnCurve(argObj).position;
				}
				if (refGeom is SG_Surface) {
					surface = refGeom as SG_Surface;
					attValue = new ArrayList();
					attValue.addItem(surface);
					attValues = new ArrayList();
					attValues.addItem(attValue);
					argObj = new Object();
					argObj["surface"] = attValues;
					rPos = geoOperations.Center.centerOfSurface(argObj).position;
				}
				
				var lblStyle:LabelStyle = labels.labelStyles[labelName] as LabelStyle;
				for (var i:int = 0; i < attValueList.length; i++) {
					var element:* = attValueList.getItemAt(i);
					var value:String = element.value.toString();
					
					// Draw label
					var lbl:portrayal.label.Label = new portrayal.label.Label();
					var labelObj:Object = new Object();
					
					labelObj.text   = value;
					labelObj.refPos = rPos;
					labelObj.style  = lblStyle;
					
					lbl.decode(labelObj);
					labelSpace.addChild(lbl);
				}
			}
			
			protected function drawSymbol(symbolName:String, refGeom:SG_Primitive):void {
				if (symbolName == "") return;
				
				if (refGeom is SG_Point) {
					var point:SG_Point = refGeom as SG_Point;
					var pointSymbolStyle:PointSymbolStyle = syms.pointSymStyles[symbolName] as PointSymbolStyle;
					var pSym:PointSymbol = new PointSymbol();
					var pObj:Object = new Object();
					pObj.point = point
					pObj.style = pointSymbolStyle;
					pSym.decode(pObj);
					symbolSpace.addChild(pSym);						
				}
				if (refGeom is SG_Curve) {
					var curve:SG_Curve = refGeom as SG_Curve;
					var lineSymbolStyle:LineSymbolStyle = syms.lineSymStyles[symbolName] as LineSymbolStyle;
					var lSym:LineSymbol = new LineSymbol();
					var lObj:Object = new Object();
					lObj.curve = curve;
					lObj.style = lineSymbolStyle;
					lSym.decode(lObj);
					symbolSpace.addChild(lSym);
				}
				if (refGeom is SG_Surface) {
					var surface:SG_Surface = refGeom as SG_Surface;
					var areaSymbolStyle:AreaSymbolStyle = syms.areaSymStyles[symbolName] as AreaSymbolStyle;
					var aSym:AreaSymbol = new AreaSymbol()
					var aObj:Object = new Object();
					aObj.surface = surface;
					aObj.style   = areaSymbolStyle;
					aSym.decode(aObj);
					symbolSpace.addChild(aSym);
				}
			}
			
			//Geometry panel handlers
			private function largerButton_clickHandler(event:MouseEvent):void
			{
				if (kit == null) {
					if (map == null) return;
				}				
				var beta:Number = 1.05;
				
				scale *= beta;
				
				barScale = new BarScale();
				barScale.drawScale(affineParam, scale);
				scaleSpace.removeChildAt(0);
				scaleSpace.addChild(barScale);
				
				var center:Coordinate2 = new Coordinate2();
				center.x = mappingBox.width * 0.5;
				center.y = mappingBox.height * 0.5;
				
				if (dragged || jumped) {
					oldOrigin.x = drawingSpace.x;
					oldOrigin.y = drawingSpace.y;
					if (dragged) dragged = false;
					if (jumped) jumped = false;
				}
				
				drawingSpace.x = center.x - (center.x - oldOrigin.x) * beta;
				drawingSpace.y = center.y - (center.y - oldOrigin.y) * beta;
				
				oldOrigin.x = drawingSpace.x;
				oldOrigin.y = drawingSpace.y;
				
				drawingSpace.scaleX = drawingSpace.scaleY = scale;
				
			}
			
			private function smallerButton_clickHandler(event:MouseEvent):void
			{
				if (kit == null) {
					if (map == null) return;
				}
				
				var beta:Number = 1.05;
				
				scale /= beta;
				
				barScale = new BarScale();
				barScale.drawScale(affineParam, scale);
				scaleSpace.removeChildAt(0);
				scaleSpace.addChild(barScale);
				
				var center:Coordinate2 = new Coordinate2();
				center.x = mappingBox.width * 0.5;
				center.y = mappingBox.height * 0.5;
				
				if (dragged || jumped) {
					oldOrigin.x = drawingSpace.x;
					oldOrigin.y = drawingSpace.y;
					if (dragged) dragged = false;
					if (jumped) jumped = false;
				}
				
				drawingSpace.x = center.x - (center.x - oldOrigin.x) / beta;
				drawingSpace.y = center.y - (center.y - oldOrigin.y) / beta;
				
				oldOrigin.x = drawingSpace.x;
				oldOrigin.y = drawingSpace.y;
				
				drawingSpace.scaleX = drawingSpace.scaleY = scale;
				
				var dsc:Coordinate2 = new Coordinate2();
				dsc.x = drawingSpace.width  * 0.5 + drawingSpace.x;
				dsc.y = drawingSpace.height * 0.5 + drawingSpace.y;
				
			}
			
			private function resetButton_clickHandler(event:MouseEvent):void
			{
				if (kit == null || portrayalSchemaFile == null) {
					Alert.show("Open kit and portrayal schema before reset.", "Alert", 4, this);
					return;
				}
				resetView();
				
				barScale = new BarScale();
				barScale.drawScale(kit.affineParam, scale);
				scaleSpace.removeChildAt(0);
				scaleSpace.addChild(barScale);
				
				var m:int = symbolSpace.numChildren;
				for (var i:int = 0; i < m; i++) {
					symbolSpace.removeChildAt(0);
				}
				
				m = labelSpace.numChildren;
				for (i = 0; i < m; i++) {
					labelSpace.removeChildAt(0);
				}
				
				for each(featureSet in featureSetArray) {
					fpUnit = fpUnits[featureSet.typeName] as FeaturePortrayalUnit;
					if (fpUnit != null) {
						var thematicModifier:ThematicCondition = fpUnit.thematicModifier;
						
						if (thematicModifier.attName != "") {
							// set Legend on the map
							this.makeLegend(thematicModifier);
						}
						
						var fType:FeatureType = kit.applicationSchema.featureTypes[featureSet.typeName] as FeatureType;							
						
						// attribute type
						var attributeTypes:ArrayList = fType.attributeTypes;
						
						// draw graphics
						var refGeom:SG_Primitive;
						for each(feature in featureSet.features) {
							var attributes:Dictionary = feature.attributes;
							
							for each(var primitiveList:ArrayList in attributes) {
								var primi:* = primitiveList.getItemAt(0);
								if (primi is SG_Object) {
									refGeom = primi as SG_Primitive;
									
									/* thematic mapping
									*/							
									if (thematicModifier != null) {
										var attArray:ArrayList = attributes[thematicModifier.attName] as ArrayList;
										var modifierType:String = thematicModifier.attType;
										if (modifierType == "Bool") {
											if (attArray == null) {
												var bm:BooleanModifier = thematicModifier.elements.getItemAt(2) as BooleanModifier;
												if (!bm.hasValue) {
													for (i = 0; i < primitiveList.length; i++) {
														refGeom = primitiveList.getItemAt(i) as SG_Primitive;	
														this.drawSymbol(bm.symName, refGeom);
													}											
												}
											}
											else {
												var attBool:Bool = attArray.getItemAt(0) as Bool;
												if (attBool.value) {
													bm = thematicModifier.elements.getItemAt(0) as BooleanModifier;
													if (bm != null) {
														m = primitiveList.length;
														for (i = 0; i < m; i++) {
															refGeom = primitiveList.getItemAt(i) as SG_Primitive;	
															this.drawSymbol(bm.symName, refGeom);
														}
													}
												}
												else {
													bm = thematicModifier.elements.getItemAt(1) as BooleanModifier;
													if (bm != null) {
														m = primitiveList.length;
														for (i = 0; i < m; i++) {
															refGeom = primitiveList.getItemAt(i) as SG_Primitive;	
															this.drawSymbol(bm.symName, refGeom);
														}
													}
												}
											}
										}	
										else if (modifierType == "CharacterString") {
											var attString:CharacterString = attArray.getItemAt(0) as CharacterString;
											var stringModifiers:ArrayList = thematicModifier.elements;
											m = stringModifiers.length;
											for (i = 0; i < m; i++) {
												var sm:QualitativeModifier = stringModifiers.getItemAt(i) as QualitativeModifier;
												if (sm.stringValue != null) {
													if (attString.value == sm.stringValue) {
														m = primitiveList.length;
														for (var j:int = 0; j < m; j++) {
															refGeom = primitiveList.getItemAt(j) as SG_Primitive;	
															this.drawSymbol(sm.symName, refGeom);
														}											
													}
												}
											}
										}
											
										else if (modifierType == "Integer" || modifierType == "Real") {
											var attNumber:Number;
											if (modifierType == "Integer") {
												var attInteger:Integer = attArray.getItemAt(0) as Integer;
												attNumber = attInteger.value;
											}
											else {
												var attReal:Real = attArray.getItemAt(0) as Real;
												attNumber = attReal.value;
											}
											var numberModifiers:ArrayList = thematicModifier.elements;
											m = numberModifiers.length;
											for (i = 0; i < m; i++) {
												var nm:QuantitativeModifier = numberModifiers.getItemAt(i) as QuantitativeModifier;
												if (nm !=  null) {
													var lower:Number = Number(nm.lowerValue);
													var upper:Number = Number(nm.upperValue);
													if (lower <= attNumber && attNumber < upper) {
														m = primitiveList.length;
														for (j = 0; j < m; j++) {
															refGeom = primitiveList.getItemAt(j) as SG_Primitive;	
															this.drawSymbol(nm.symName, refGeom);
														}
													}
												}
											}
										}
									}
									
									/* general mapping
									*/
									var generalModifiers:Dictionary = fpUnit.generalModifiers;
									for (i = 0; i < attributeTypes.length; i++) {
										var attType:AttributeType = attributeTypes.getItemAt(i) as AttributeType;
										var attValueList:ArrayList = attributes[attType.name];
										if (attValueList == null) {
											fType = kit.applicationSchema.featureTypes[feature.typeName] as FeatureType;									}
										else {
											var asPair:AttributeSymbolPair = generalModifiers[attType.name] as AttributeSymbolPair;
											if (asPair != null) {
												if (asPair.symName != "") {	
													for (j = 0; j < attValueList.length; j++) {
														this.drawSymbol(asPair.symName, refGeom);
													}
												}
											}
											else {
												var alPair:AttributeLabelPair = generalModifiers[attType.name] as AttributeLabelPair;
												if (alPair != null) {
													if (alPair.labelName != "") {	
														for (j = 0; j < attValueList.length; j++) {
															this.drawLabel(attValueList, alPair.labelName, refGeom);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			
			private function dragButton_clickHandler(event:MouseEvent):void
			{				
				if (dragFlag) { 
					dragFlag = false;
					dragButton.label = "pan";
					Mouse.cursor = "arrow";
				}
				else {
					dragFlag = true;
					dragButton.label = "fix";
				}
			}
			
			private function mappingMainBox_mouseUpHandler(event:MouseEvent):void
			{
				if (dragFlag) {	
					drawingSpace.stopDrag();
					Mouse.cursor = "arrow";
					dragged = true;
					
				}
				

				if (movingLayer == "title") {
					titleSpace.stopDrag();
					if (maintitle == null) maintitle = new Title();
					maintitle.x = titleSpace.x;
					maintitle.y = titleSpace.y;
				}
				
				if (movingLayer == "subtitle") {
					subtitleSpace.stopDrag();
					if (subtitle == null) subtitle = new Title();
					subtitle.x = subtitleSpace.x;
					subtitle.y = subtitleSpace.y;
				}
				
				if (movingLayer == "legend") {
					legendSpace.stopDrag();
					if (legendSpace.numChildren > 0)
						legend = legendSpace.getChildAt(0) as MapLegend;
				}
				
				if (movingLayer == "north arrow") {
					northArrowImage.stopDrag();
					northArrow   = new NorthArrow();
					northArrow.x = northArrowImage.x;
					northArrow.y = northArrowImage.y;
					northArrow.source = arrowSource;
				}
				
				if (movingLayer == "bar-scale") scaleSpace.stopDrag();
				
				if (movingLayer == "label") {
					if (selectedLabel != null) {
						selectedLabel.stopDrag();
						selectedLabel.refPos.x += selectedLabel.x;
						selectedLabel.refPos.y += selectedLabel.y;
					}
					Mouse.cursor = "arrow";
				}

			}
			
			
			private function mappingMainBox_mouseDownHandler(event:MouseEvent):void
			{
				// IMAGE DRAGGING
				if (dragFlag) {
					drawingSpace.startDrag(false);
					Mouse.cursor = "button";					
					return;
				}
				
				if (movingLayer == "title") titleSpace.startDrag(false);
				
				if (movingLayer == "subtitle") subtitleSpace.startDrag(false);
				
				if (movingLayer == "legend") legendSpace.startDrag(false);
				
				if (movingLayer == "north arrow") {
					northArrowImage.startDrag(false);
					northArrow = new NorthArrow();
				}
				
				if (movingLayer == "bar-scale") scaleSpace.startDrag(false);
				
				if (movingLayer == "label") {
					var p:Point = new Point(drawingSpace.mouseX, drawingSpace.mouseY);
					var labelArray:Array = labelSpace.getObjectsUnderPoint(p);
					
					if (labelArray.length > 0) {
						var selectedText:TextField = labelArray[0] as TextField;
						selectedLabel = selectedText.parent as portrayal.label.Label;
						selectedLabel.startDrag(false);
						Mouse.cursor = "button";
					}
				}
				
				if (movingLayer == "pictBox") {
					if (pictPushedFlag) {
						var i:int = int((drawingSpace.mouseX - pictBox.x) * drawingSpace.scaleX / 18.);
						var j:int = int((drawingSpace.mouseY - pictBox.y) * drawingSpace.scaleY / 18.);
						
						if (i < 0 || i > 2 || j < 0 || j > 2) {
							foundFlag = false;
							pictPushedFlag = false;
							pictBox.visible = false;
							return;
						}
						
						var pictNo:int = i + j * 3;
						var attTypeName:String = multimediaType[pictNo];
						var attName:String = "";
						
						var fpUnit:FeaturePortrayalUnit = portrayals.fpUnits[selectedFeature.typeName] as FeaturePortrayalUnit;
						if (fpUnit == null) return;
						
						var fType:FeatureType = kit.applicationSchema.featureTypes[fpUnit.featureTypeID] as FeatureType;
					
						var attTypes:Dictionary = fpUnit.infoPages;
						for each (var attType:AttributeType in attTypes) {
							var atdt:String = attType.dataType;
							if (pictNo != 6) {
								if (atdt == attTypeName) 
									attName = attType.name;
								else
									attName = "";
							} else if (pictNo == 6) {
								if (atdt == "Real" || atdt == "Integer" || atdt == "Bool" || atdt == "CharacterString") 
									attName = attType.name;
								else
									attName = "";
							}
							
							if (attName != "" ) {
						
								if (pictNo == 0) {
									if (memoViewer == null) {
										memoViewer = new MemoViewer();
										memoViewer.open();
										memoViewer.title = "MapEditor >";
										memoViewer.addEventListener(Event.CLOSE, memoViewerClose);
									}

									var obj:Object = new Object();
									obj.attName = attName;
									obj.memoArray = selectedFeature.attributes[attName] as ArrayList;
									memoViewer.memoObjectArray.addItem(obj);
								}
						
								if (pictNo == 1) {
									if (websiteViewer == null) {
										websiteViewer = new WebsiteViewer();
									}
									websiteViewer.open();
									websiteViewer.title = "MapEditor >";
									
									obj = new Object();
									obj.attName = attName;
									obj.urlArray = selectedFeature.attributes[attName] as ArrayList;
									websiteViewer.urlObjectArray.addItem(obj);
																		
									websiteViewer.addEventListener(Event.CLOSE, websiteViewerClose);
								}
						
								if (pictNo == 2) {
									if (imageViewer == null) {
										imageViewer = new ImageViewer();
									}
									imageViewer.open();
									imageViewer.title = "MapEditor >";
									imageViewer.kitURL = kitURL;
									
									obj = new Object();
									obj.attName = attName;
									obj.imageArray = selectedFeature.attributes[attName] as ArrayList;
									imageViewer.imageObjectArray.addItem(obj);
									
									imageViewer.addEventListener(Event.CLOSE, imageViewerClose);
								}
							
								if (pictNo == 3) {
									if (videoViewer == null) {
										videoViewer = new VideoViewer();
									}
									videoViewer.open();
									videoViewer.title = "MapEditor >";
									videoViewer.kitURL = kitURL;
									
									obj = new Object();
									obj.attName = attName;
									obj.videoArray = selectedFeature.attributes[attName] as ArrayList;
									videoViewer.videoObjectArray.addItem(obj);
									
									videoViewer.addEventListener(Event.CLOSE, videoViewerClose);						
								}
						
								if (pictNo == 4) {
									if (soundListener == null) {
										soundListener = new SoundListener();
									}
									soundListener.open();
									soundListener.title = "MapEditor >";
									soundListener.kitURL = kitURL;
									
									obj = new Object();
									obj.attName = attName;
									obj.soundArray = selectedFeature.attributes[attName] as ArrayList;
									soundListener.soundObjectArray.addItem(obj);
									
									soundListener.addEventListener(Event.CLOSE, soundListenerClose);						
								}
						
								if (pictNo == 5) {
									if (addressViewer == null) {
										addressViewer = new AddressViewer();
									}
							
									addressViewer.open();
									addressViewer.title = "MapEditor >";
									addressViewer.kitURL = kitURL;
									
									obj = new Object();
									obj.attName = attName;
									obj.addressArray = selectedFeature.attributes[attName] as ArrayList;
									addressViewer.addressObjectArray.addItem(obj);

									addressViewer.addEventListener(Event.CLOSE, addressViewerClose);						
								}
					
								if (pictNo == 6) {
									if (simpleDataViewer == null) {
										simpleDataViewer = new SimpleDataViewer();
										
										simpleDataViewer.title = "MapEditor >";
										simpleDataViewer.addEventListener(Event.CLOSE, simpleDataViewerClose);	
										simpleDataViewer.open();										
									}
									
									obj = new Object();
									obj.attName = attName;
									obj.simpleDataArray = selectedFeature.attributes[attName] as ArrayList;
									simpleDataViewer.simpleObjectArray.addItem(obj);

								}
							}
						}						
					}
					
					if (foundFlag) {
						pictPushedFlag = true;
						Mouse.show();
					}
				}
			}
			
			protected function memoViewerClose(event:Event):void {
				memoViewer = null;
			}
			
			protected function websiteViewerClose(event:Event):void {
				websiteViewer = null;
			}
			
			protected function imageViewerClose(event:Event):void {
				imageViewer = null;
			}
			
			protected function videoViewerClose(event:Event):void {
				videoViewer.videoView.stop();
				videoViewer = null;
			}
			
			protected function soundListenerClose(event:Event):void {
				if (soundListener.sndChannel != null) 
					soundListener.sndChannel.stop();

				soundListener = null;
			}
			
			protected function addressViewerClose(event:Event):void {
				addressViewer = null;
			}

			protected function simpleDataViewerClose(event:Event):void {
				simpleDataViewer = null;
			}
			
			protected function mappingMainBox_mouseMoveHandler(event:MouseEvent):void
			{
				if (pictPushedFlag) return;
				
				var p:Point = new Point(drawingSpace.mouseX, drawingSpace.mouseY);
				var crd:Coordinate2 = new Coordinate2();
				crd.x = p.x;
				crd.y = p.y;
				
				if (movingLayer == "label") {
					var labelArray:Array = labelSpace.getObjectsUnderPoint(p);
				
					if (labelArray.length > 0) {
						Mouse.cursor = "button";
						labelArray = new Array();
					}
					else 
						Mouse.cursor = "arrow";
				}
				
				if (movingLayer == "pictBox") {
					var pSym:PointSymbol;
					var lSym:LineSymbol;
					var aSym:AreaSymbol;
					foundFlag = false;
					
					var ftIndex:int = featureTypesDropdown.selectedIndex;
					if (ftIndex == -1) return;
					var fTypeID:String = featureTypesArray.getItemAt(ftIndex) as String;
					
					if (symbolSpace.numChildren > 0) {
						var i:int = 0;						
						while(!foundFlag && i < symbolSpace.numChildren) {
							var sym:* = symbolSpace.getChildAt(i);
							if (sym is PointSymbol) {
								pSym = sym as PointSymbol;
								if (math.Distance.p2p(crd, pSym.point.position) < 5.0) {
									var fids:ArrayList = pSym.point.featureID;
									for (var j:int = 0; j < fids.length; j++) {
										var fid:String = fids.getItemAt(j) as String;
										var ftr:Feature = kit.featureList[fid] as Feature;
										if (ftr.typeName == fTypeID) { 
											selectedFeature = ftr;
											foundFlag = true;
										}
									}
								}
							}
					
							if (sym is LineSymbol) {
								lSym = sym as LineSymbol;
								var ls:CoordinateArray = lSym.curve.coordinateSeqence();
								if (math.Distance.p2ls(crd, ls) < 5.0) {
									fids = lSym.curve.featureID;
									for (j = 0; j < fids.length; j++) {
										fid = fids.getItemAt(j) as String;
										ftr = kit.featureList[fid] as Feature;
										if (ftr.typeName == fTypeID) { 
											selectedFeature = ftr;
											foundFlag = true;
										}
									}
								}
							}
					
							if (sym is AreaSymbol) {
								aSym = sym as AreaSymbol;
								var ring:SG_Ring = aSym.surface.exterior;
								if (math.Relation.pointInRing(crd, ring)) {
									fids = aSym.surface.featureID;
									for (j = 0; j < fids.length; j++) {
										fid = fids.getItemAt(j) as String;
										ftr = kit.featureList[fid] as Feature;
										if (ftr.typeName == fTypeID) { 
											selectedFeature = ftr;
											foundFlag = true;
										}
									}
								}
							}
							i++;
						}
						
						if (!foundFlag) {
							pictBox.visible = false;
							Mouse.show();
							return;
						}
						
						// Found a symbol with multimedia attributes!
						pictBox.visible = true;
						Mouse.hide();
						
						//var fType:FeatureType = kit.applicationSchema.featureTypes[fTypeID] as FeatureType;
						fpUnit = fpUnits[fTypeID] as FeaturePortrayalUnit;

						var selected:Number = 0.9;
						var unselected:Number = 0.2;
						picts = [0, 0, 0, 0, 0, 0, 0];
						
						memoButton.alpha 	= unselected;
						urlButton.alpha 	= unselected;
						imageButton.alpha 	= unselected;
						videoButton.alpha 	= unselected;
						soundButton.alpha 	= unselected;
						addressButton.alpha	= unselected;
						simpleDataButton.alpha = unselected;
						
						//for (i = 0; i < fType.attributeTypes.length; i++) {
						for each(var attType:AttributeType in fpUnit.infoPages) {
							//var attType:AttributeType = fType.attributeTypes.getItemAt(i) as AttributeType;
							
							var selectedAttArray:ArrayList;
							var multiIndex:int = -1;
							var atdt:String = attType.dataType;
							
							for (j = 0; j < 6; j++) {
								if (atdt == multimediaType[j]) {
									multiIndex = j;
									selectedAttArray = selectedFeature.attributes[attType.name] as ArrayList;
								}
							}
							
							// Simple data types
							if (atdt == "Real" || atdt == "Integer" || atdt == "Bool" || atdt == "CharacterString") {
								multiIndex = 6;
								selectedAttArray = selectedFeature.attributes[attType.name] as ArrayList;									
							}
							
							picts[multiIndex] = 1;
							if (multiIndex == 0 && selectedAttArray != null) memoButton.alpha 	 	= selected;
							if (multiIndex == 1 && selectedAttArray != null) urlButton.alpha 	 	= selected;
							if (multiIndex == 2 && selectedAttArray != null) imageButton.alpha 	 	= selected;
							if (multiIndex == 3 && selectedAttArray != null) videoButton.alpha 	 	= selected;
							if (multiIndex == 4 && selectedAttArray != null) soundButton.alpha 	 	= selected;
							if (multiIndex == 5 && selectedAttArray != null) addressButton.alpha 	= selected;
							if (multiIndex == 6 && selectedAttArray != null) simpleDataButton.alpha	= selected;
						}
												
						pictBox.x = p.x - 26./scale;
						pictBox.y = p.y - 26./scale;
						pictBox.scaleX = 1./scale;
						pictBox.scaleY = 1./scale;
						
					}
				}
			}
			
			public function setKit(kitFileURL:String):void {
				var kitStream:FileStream = new FileStream();
				var kitFile:File = new File();
				kitFile.url = kitFileURL;  // THis url shall be an absolute path
				try {
					kitStream.open(kitFile, FileMode.READ);
					
					kit = kitStream.readObject();
					
					kitStream.close();
				} catch(e:IOError) {
					Alert.show("kit open error:" + e, "Alert", 4, this);
				}
				
				kitNameLabel.text = kitFile.name;
				
				var pathURL:String = kitFileURL;
				var pathArray:Array = pathURL.split("/");
				var kitURL:String = "";
				for (var i:int = 0; i < pathArray.length - 1; i++) {
					kitURL += pathArray[i] + "/";
				}

				kit.applicationSchema = this.openApplicationSchema(kitURL, kit.applicationSchemaURL);
				
				this.setKitParameters();
				
			}
			
			// Text and instruction  Controls
			protected function text_jp_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/jp/mapEditor_jp.html");
				navigateToURL(request);
			}
			
			protected function text_en_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/en/mapEditor_en.html");
				navigateToURL(request);
			}
			
			protected function titleRadio_clickHandler(event:MouseEvent):void
			{
			}
			
			protected function titleButton_clickHandler(event:MouseEvent):void
			{
				titleEditor = new TitleEditor();
				titleEditor.open();
				titleEditor.title = "MapEditor >";
				titleEditor.addEventListener(Event.CLOSE, titleEditorClose);
				titleEditor.addEventListener(MouseEvent.CLICK, drawTitles);
			}
			
			protected function titleEditorClose(event:Event):void {

			}
			
			protected function drawTitles(event:Event):void {
				if (!titleEditor.setButtonFlag) return;
				
				titleEditor.setButtonFlag = false;
					
				maintitle = titleEditor.mapTitle;
				subtitle  = titleEditor.mapSubtitle;
				
				var maintxt:TextField = this.setTitleText(maintitle);
				var subtxt:TextField  = this.setTitleText(subtitle);

				maintxt.width  = 500;
				maintxt.height = 100;
								
				titleSpace.x = maintitle.x;
				titleSpace.y = maintitle.y;
				
				if (titleSpace.numChildren > 0) titleSpace.removeChildAt(0);
				titleSpace.addChild(maintxt);
				
				subtxt.width = 500;
				subtxt.height = 100;
								
				subtitleSpace.x = subtitle.x;
				subtitleSpace.y = subtitle.y;
				
				if (subtitleSpace.numChildren > 0) subtitleSpace.removeChildAt(0);
				subtitleSpace.addChild(subtxt);
			}
			
			protected function setTitleText(title:Title):TextField {
				var txt:TextField = new TextField();
				
				txt.text = title.text
				
				txt.width = 500;
				txt.height = 100;
				
				var tf:TextFormat = new TextFormat();
				tf.font = title.font;
				tf.size = title.size;
				tf.bold = title.bold;
				tf.color = title.color;
				txt.setTextFormat(tf);	
				
				return txt;
			}
			
			protected function moveMarginalDropDown_changeHandler(event:IndexChangeEvent):void
			{
				var marginalItem:Array = new Array("title", "subtitle", "north arrow", "legend", "bar-scale", "label");
				var i:int = moveMarginalDropDown.selectedIndex;
				if (i == -1) return;
				movingLayer = marginalItem[i];
			}
			
			protected function northArrowRadio_clickHandler(event:MouseEvent):void
			{
			}
			
			protected function northArrowButton_clickHandler(event:MouseEvent):void
			{
				northArrowSelector = new NorthArrowSelector();
				northArrowSelector.open();
				northArrowSelector.addEventListener(Event.CLOSE, northArrowSelectorClose);
				northArrowSelector.addEventListener(MouseEvent.CLICK, setNorthArrowSelector);
			}
			
			protected function northArrowSelectorClose(event:Event):void {
				
			}
			
			protected function setNorthArrowSelector(event:Event):void {
				arrowSource = northArrowSelector.imageSource;	
			}
						
			protected function openMapButton_clickHandler(event:MouseEvent):void
			{
				// Open the map
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("Map File", "*.map");
					file.addEventListener(Event.SELECT, openMap);
					file.browseForOpen("Open map   [キャンセル:CANCEL  保存:SAVE]");		
				} catch (error:IOError) {
					Alert.show("Error", "Open map error:" + error.message, 4, this);
				}				
			}
			
			protected function openMap(event:Event):void {
				scaleSpace.visible  = true;

				stream = new FileStream();
				try {
					stream.open(file, FileMode.READ);
					map = stream.readObject() as portrayal.map.Map;
					stream.close();
				} catch (error:IOError) {
					Alert.show("Error", "Open map error:" + error.message, 4, this);					
				}
				mapFileLabel.text = file.name;
				
				// Kit and portrayal
				if (map.kitFileName == null || map.portrayalSchema == null) {
					// This warning is th service for old style maps. 2014-08-02
					Alert.show("Open kit and portrayalSchema before operation.", "Warning", 4, this);
				}
				
				var pathURL:String = file.url;
				var pathArray:Array = pathURL.split("/");
				
				var mapURL:String = "";
				for (var i:int = 0; i < pathArray.length - 1; i++) {
					mapURL += pathArray[i] + "/";
				}
				
				kitURL = mapURL;
				this.setKit(kitURL + map.kitFileName);
				
				portrayals = map.portrayalSchema;
				
				this.setKitParameters();
				
				// Basic parameters
				drawingSpace.x = map.x;
				drawingSpace.y = map.y;
				drawingSpace.width  = map.width;
				drawingSpace.height = map.height;
				drawingSpace.scaleX = drawingSpace.scaleY = map.scale;
				
				oldOrigin.x = drawingSpace.x;
				oldOrigin.y = drawingSpace.y;
				
				mapBackground = map.backgroundColor;
				mapBackgroundAlpha = map.backgroundColorAlpha;
				
				// north arrow
				if (map.northArrow != null) {
					northArrow = map.northArrow;
					arrowSource = map.northArrow.source;
					northArrowImage.x = map.northArrow.x;
					northArrowImage.y = map.northArrow.y;
				}
				
				//barScale
				scaleSpace.x = map.barScale.offset.x;
				scaleSpace.y = map.barScale.offset.y;
				
				affineParam  = map.barScale.affine;
				scale = map.scale;
				
				if (scaleSpace.numChildren > 0) scaleSpace.removeChildAt(0);
				
				barScale = new BarScale();
				
				barScale.drawScale(affineParam, scale);
				scaleSpace.addChild(barScale);
				
				// lagend
				if (legend == null) legend = new MapLegend();
				if (map.legendParam != null) {
					legend.param = map.legendParam;
					legend.setLegend();
					legendSpace.addChild(legend);
					legendSpace.x = legend.param.offset.x;
					legendSpace.y = legend.param.offset.y;
				}
				
				// title
				if (map.title != null) {
					var maintxt:TextField = this.setTitleText(map.title);
				
					maintxt.width = 500;
					maintxt.height = 100;
				
					maintitle = map.title;
					titleSpace.x = map.title.x;
					titleSpace.y = map.title.y;
				
					if (titleSpace.numChildren > 0) titleSpace.removeChildAt(0);
					titleSpace.addChild(maintxt);
				}
				
				// subtitle
				if (map.subtitle != null) {
					var subtxt:TextField  = this.setTitleText(map.subtitle);
				
					subtxt.width = 500;
					subtxt.height = 100;
				
					subtitle = map.subtitle;
					subtitleSpace.x = map.subtitle.x;
					subtitleSpace.y = map.subtitle.y;
				
					if (subtitleSpace.numChildren > 0) subtitleSpace.removeChildAt(0);
					subtitleSpace.addChild(subtxt);
				}
				
				//labels
				for (i = 0; i < labelSpace.numChildren; i++) {
					labelSpace.removeChildAt(0);	
				}
				for (i = 0; i < map.labelArray.length; i++) {
					var lblObj:Object = map.labelArray.getItemAt(i) as Object;
					var lbl:portrayal.label.Label = new portrayal.label.Label();
					lbl.decode(lblObj);
					labelSpace.addChild(lbl);
				}
				
				// symbols
				for (i = 0; i < symbolSpace.numChildren; i++) {
					symbolSpace.removeChildAt(0);	
				}
				for (i = 0; i < map.symbolArray.length; i++) {
					var symObj:Object = map.symbolArray.getItemAt(i) as Object;
					
					if (symObj.style is PointSymbolStyle) {
						var pSym:PointSymbol = new PointSymbol();
						pSym.decode(symObj);
						symbolSpace.addChild(pSym);
					}
					
					if (symObj.style is LineSymbolStyle)  {
						var lSym:LineSymbol = new LineSymbol();
						lSym.decode(symObj);
						symbolSpace.addChild(lSym);
					}
					
					if (symObj.style is AreaSymbolStyle)  {
						var aSym:AreaSymbol = new AreaSymbol();
						aSym.decode(symObj);
						symbolSpace.addChild(aSym);
					}
				}
			}
			
			protected function saveMapButton_clickHandler(event:MouseEvent):void
			{
				// Save the map
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("Map File", "*.map");
					file.addEventListener(Event.SELECT, saveMap);
					file.browseForSave("Save map   [キャンセル:CANCEL  保存:SAVE]");		
				} catch (error:IOError) {
					Alert.show("Error", "Save map error:" + error.message, 4, this);
				}
			}
			
			protected function saveMap(event:Event):void {
				// Map data compilation
				map   = new portrayal.map.Map;
				
				// Kit and portrayals
				map.kitFileName = kitFileName;
				map.portrayalSchema = portrayals;
				
				// basic parameters
				map.x = drawingSpace.x;
				map.y = drawingSpace.y;
				map.width  = drawingSpace.width;
				map.height = drawingSpace.height;
				map.scale  = drawingSpace.scaleX;  // this value is always same as scaleY.
				map.backgroundColor = mapBackground;
				map.backgroundColorAlpha = mapBackgroundAlpha;
				
				// barScale
				var offset:Coordinate2 = new Coordinate2();
				offset.x = scaleSpace.x;
				offset.y = scaleSpace.y;
				map.barScale.offset = offset;
	
				if (kit != null) 
					map.barScale.affine = kit.affineParam;
				else
					map.barScale.affine = affineParam;
				
				
				// legend
				if (legend != null) {
					map.legendParam = legend.param;
					map.legendParam.offset.x = legendSpace.x;
					map.legendParam.offset.y = legendSpace.y;
				}
				
				// north arrow
				northArrow = new NorthArrow();
				northArrow.source = arrowSource;
				northArrow.x = northArrowImage.x;
				northArrow.y = northArrowImage.y;
				map.northArrow = northArrow;
				
				// titles
				map.title      = maintitle;
				map.subtitle   = subtitle;
				
				// label array
				map.labelArray = new ArrayList();
				var n:int = labelSpace.numChildren;
				for (var i:int = 0; i < n; i++) {
					var lbl:portrayal.label.Label = labelSpace.getChildAt(i) as portrayal.label.Label;
					map.labelArray.addItem(lbl.encode());
				}
				
				// symbol array
				map.symbolArray = new ArrayList();
				n = symbolSpace.numChildren;
				for (i = 0; i < n; i++) {
					var sym:* = symbolSpace.getChildAt(i);
					map.symbolArray.addItem(sym.encode());
				}
				
				var startIndex:int = file.nativePath.length - 4;
				var suffix:String = file.nativePath.slice(startIndex);
				if (suffix != ".map") file.nativePath += ".map";
				
				stream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeObject(map);
				stream.close();
				mapFileLabel.text = file.name;
			}
			
			protected function showAttCheckBox_clickHandler(event:MouseEvent):void
			{
				if (kit == null || portrayals == null) {
					showAttCheckBox.selected =false;
					return;
				}
				
				if (showAttCheckBox.selected) {
					movingLayer = "pictBox";
					moveMarginalDropDown.enabled = false;
				}
				else {
					moveMarginalDropDown.enabled = true;
					pictBox.visible = false;
					var marginalItem:Array = new Array("title", "subtitle", "north arrow", "legend", "bar-scale", "label");
					var i:int = moveMarginalDropDown.selectedIndex;
					if (i == -1) {
						movingLayer = "";
						return;
					}
					movingLayer = marginalItem[i];
				}
			}
			
			protected function setBackground_clickHandler(event:MouseEvent):void
			{
				colorSelector = new ColorSelector();
				colorSelector.open();
				
				colorSelector.initializeWindow(mapBackground, mapBackgroundAlpha);
				
				colorSelector.addEventListener(Event.CLOSE, setMapBackground);
			}
			
			protected function setMapBackground(event:Event):void {
				mapBackground = colorSelector.color;
				mapBackgroundAlpha = colorSelector.cAlpha;
				colorSelector = null;
			}
			
			
			protected function openGazetteerButton_clickHandler(event:MouseEvent):void
			{
				if (kit == null) {
					Alert.show("Open kit before gazetteer.", "Alert", 4, this);
					return;
				}
				
				try {
					file = new File();
					var filter:FileFilter = new FileFilter("Gazetteer", "*.gaz");
					file.addEventListener(Event.SELECT, openGazetteer);
					file.browseForOpen("Open Gazetteer", [filter]);
				} catch (error:IOError) {
					Alert.show(error.message, "Alert", 4, this);
				}
			}
			
			private function openGazetteer(event:Event):void {
				gazette = new Gazetteer();
				stream = new FileStream();
				try {
					stream.open(file,FileMode.READ);
					gazette = stream.readObject();
					stream.close();					
				} catch (error:IOError) {
					Alert.show(error.message, "Alert", 4, this);
					return;
				}
				
				gazetteerLabel.text = file.name;
				
				gazetteerWindow = new GazetteerViewer();

				gazetteerWindow.title = "MapEditor >";
				gazetteerWindow.gazetteer = gazette;
				gazetteerWindow.open();	
				gazetteerWindow.addEventListener(Event.CLOSING, gazetteerClose);
				gazetteerWindow.addEventListener(MouseEvent.CLICK, jumpToPosition);
			}
			
			private function gazetteerClose(event:Event):void {
				gazetteerWindow = null;
				gazetteerLabel.text = "";
				gazette = null;
			}
			
			private function jumpToPosition(event:Event):void {
				var li:LocationInstance = gazetteerWindow.locationInstance as LocationInstance;
				if (li == null) return;
				
				var pos:Coordinate2 = li.position;
								
				drawingSpace.x = oldOrigin.x + (kitCenter.x - pos.x) * scale;
				drawingSpace.y = oldOrigin.y + (kitCenter.y - pos.y) * scale;
				
				var dpos:Coordinate2 = new Coordinate2();
				dpos.x = (drawingSpace.x + pos.x * scale) - mappingBox.width  * 0.5;
				dpos.y = (drawingSpace.y + pos.y * scale) - mappingBox.height * 0.5;
				
				drawingSpace.x = drawingSpace.x - dpos.x;
				drawingSpace.y = drawingSpace.y - dpos.y;
				
				jumped = true;
				
			}
			
			public function closeMapEditor(): void {
				if (titleEditor != null) titleEditor.close();
				if (northArrowSelector != null) northArrowSelector.close();
				if (gazetteerWindow != null) gazetteerWindow.close();
				if (colorSelector != null) colorSelector.close();
			}
			
			protected function featureTypesDropdown_changeHandler(event:IndexChangeEvent):void
			{

			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="moveMarginalInfoGroup"/>
		<!-- 非ビジュアルエレメント (サービス、値オブジェクトなど) をここに配置 -->
	</fx:Declarations>	
	<s:Image x="15" y="7" source="@Embed(source='images/pictRepresentation1.png')"/>
	<s:Label x="82" y="13" fontFamily="Arial" fontSize="16" text="Map Editor"/>
	
	<s:Button id="openKitButton" x="77" y="65" width="50" height="20" label="open"
			  click="openKitButton_clickHandler(event)"/>
	<s:Label x="133" y="72" width="27" height="10" fontSize="11" text="Kit"/>
	<s:Label id="kitNameLabel" x="77" y="88" width="120" height="20" backgroundColor="#DADADA"
			 fontSize="11" verticalAlign="middle"/>
	<s:Button id="openportrayalSchemaButton" x="205" y="63" width="50" height="20" label="open"
			  click="openportrayalSchemaButton_clickHandler(event)"/>
	<s:Label x="257" y="59" width="69" height="30" fontSize="11" text="Portrayal Schema "/>
	<s:Label id="portrayalSchemaLabel" x="205" y="88" width="120" height="20" backgroundColor="#DADADA"
			 fontSize="11" verticalAlign="middle"/>
	
	<s:Panel id="mappingPanel" left="76" right="30" top="116" bottom="34"
			 dropShadowVisible="false" fontSize="14" title="Map">
		<s:Button id="resetButton" y="-26" right="5" width="35" height="20" label="-"
				  click="resetButton_clickHandler(event)" />
		<s:Button id="largerButton" y="-26" right="43" width="35" height="20" label="&lt;"
				  click="largerButton_clickHandler(event)" />
		<s:Button id="smallerButton" y="-26" right="81" width="35" height="20" label="&gt;"
				  click="smallerButton_clickHandler(event)" />
		<s:Button id="dragButton" y="-26" right="119" width="42" label="pan"
				  click="dragButton_clickHandler(event)" />
		<s:DropDownList id="moveMarginalDropDown" y="-27" right="274" width="98" height="20"
						change="moveMarginalDropDown_changeHandler(event)" fontSize="12"
						labelField="item" prompt="annotation" >
			<s:dataProvider>
				<s:ArrayList>
					<fx:Object item="title"/>
					<fx:Object item="subtitle"/>
					<fx:Object item="north arrow"/>
					<fx:Object item="legend"/>
					<fx:Object item="bar-scale"/>
					<fx:Object item="label"/>
				</s:ArrayList>
			</s:dataProvider>
		</s:DropDownList>
		<s:Label y="-20" right="377" fontSize="11" text="Move"/>
		
		<s:CheckBox id="showAttCheckBox" y="-26" right="168" label="Show attributes"
					click="showAttCheckBox_clickHandler(event)" fontSize="11" chromeColor="#dadada"/>
		
		<s:Group id="mappingMainBox" clipAndEnableScrolling="true" width="100%" height="100%" visible="true" x="0" y="0" 
			 mouseDown="mappingMainBox_mouseDownHandler(event)"
			 mouseUp="mappingMainBox_mouseUpHandler(event)"
			 mouseMove="mappingMainBox_mouseMoveHandler(event)">
		
			<s:Rect x="0" y="0" width="100%" height="100%" >
				<s:fill>
					<s:SolidColor color="{mapBackground}"/>
				</s:fill>
			</s:Rect>
	
			<s:Group id="mappingBox" x="0" y="0" width="100%" height="100%">
				<s:Group id="drawingSpace" x="0" y="0" width="100%" height="100%">
					<s:SpriteVisualElement id="symbolSpace" x="0" y="0"/>
					<s:SpriteVisualElement id="labelSpace"  x="0" y="0"/>
					<s:Group id="pictBox" x="0" y="0" visible="false">
						<s:Image id="memoButton"  source="images/MultimediaPict/memoPict.png" x="0" y="0"/>
						<s:Image id="urlButton"   source="images/MultimediaPict/urlPict.png" x="18" y="0"/>
						<s:Image id="imageButton" source="images/MultimediaPict/imagePict.png" x="36" y="0"/>	
						<s:Image id="videoButton" source="images/MultimediaPict/videoPict.png" x="0" y="18"/>
						<s:Image id="soundButton" source="images/MultimediaPict/soundPict.png" x="18" y="18"/>
						<s:Image id="addressButton" source="images/MultimediaPict/addressPict.png" x="36" y="18"/>
						<s:Image id="simpleDataButton" source="images/MultimediaPict/simpleDataPict.png" x="0" y="36" />
					</s:Group> 
				</s:Group>
	
				<s:Group id="marginalSpace" x="0" y="0" width="100%" height="100%">
					<s:SpriteVisualElement id="titleSpace" x="10" y="10"/>
					<s:SpriteVisualElement id="subtitleSpace" x="10" y="60"/>
					<s:SpriteVisualElement id="legendSpace" x="10" y="300"/>
					<s:SpriteVisualElement id="scaleSpace" x="0" y="0"/>
					<s:Image id="northArrowImage" x="400" y="10" source="{arrowSource}" />
				</s:Group>				
			</s:Group>
		</s:Group>		
	</s:Panel>		
	
	<s:Label right="58" top="10" buttonMode="true" click="text_jp_clickHandler(event)"
			 color="#969696" fontFamily="Osaka" fontSize="11" text="日本語"/>
	<s:Label right="10" top="12" buttonMode="true" click="text_en_clickHandler(event)"
			 color="#969696" text="English"/>
	<s:Rect y="28" right="30" width="116" height="80">
		<s:fill>
			<s:SolidColor color="0xdadada"/>
		</s:fill>
	</s:Rect>
	<s:Button id="titleButton" y="33" right="37" width="103" height="20" label="title / subtitle »"
			  click="titleButton_clickHandler(event)"/>
	<s:Button id="northArrowButton" y="58" right="37" width="103" height="20" label="north arrow »"
			  click="northArrowButton_clickHandler(event)"/>
	<s:Button id="openMapButton" right="236" bottom="9" width="50" height="20" label="open"
			  click="openMapButton_clickHandler(event)"/>
	<s:Button id="saveMapButton" right="178" bottom="9" width="50" height="20" label="save"
			  click="saveMapButton_clickHandler(event)"/>
	<s:Label id="mapFileLabel" right="30" bottom="9" width="110" height="20"
			 backgroundColor="#DADADA" verticalAlign="middle"/>
	<s:Label right="148" bottom="12" text="Map"/>
	<s:Button id="setBackground" y="83" right="37" width="103" height="20" label="background »"
			  click="setBackground_clickHandler(event)"/>
	<s:Label y="16" right="129" fontSize="11" text="Set"/>
	<s:Button id="openGazetteerButton" x="335" y="20" width="55" height="20" label="open"
			  click="openGazetteerButton_clickHandler(event)"/>
	<s:Label x="395" y="26.5" fontSize="11" text="Gazetteer"/>
	<s:Label id="gazetteerLabel" x="334" y="43" width="120" height="20" backgroundColor="#DADADA"
			 verticalAlign="middle"/>
	<s:Label x="334" y="73" fontSize="11" text="Select feature type"/>
	<s:DropDownList id="featureTypesDropdown" x="333" y="87" width="121"
					change="featureTypesDropdown_changeHandler(event)" 
					dataProvider="{featureTypesArray}"></s:DropDownList>
	
</s:Window>