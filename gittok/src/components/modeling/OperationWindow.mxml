<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  title="Operation Type Modeler"
		  width="575" height="682"
		  creationComplete="initializeApp()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>


	<fx:Script>
		<![CDATA[
			import geoOperations.Center;
			
			import gfm.*;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			
			import spark.events.IndexChangeEvent;
			
			public 	var faSelection:Boolean;  // true: featureType   false: associarionType
			public 	var associationType:AssociationType;
			public 	var featureType:FeatureType;
			private	var linkAssoType:AssociationType;
			
			[Bindable]
			protected var faTypeArray:ArrayList;
			
			[Bindable]
			protected var operationDef:XMLList = new XMLList();
			
			[Bindable]
			public var selectedOperations:ArrayList = new ArrayList();
			
			[Bindable]
			protected var argumentsArray:ArrayList = new ArrayList();
			
			[Bindable]
			protected var argAttArray:ArrayList = new ArrayList();
			
			protected var opType:OperationType = new OperationType();
			
			private var color1:uint = 0x13233a;
			private var color2:uint = 0xd9d9dc;
			
			[Bindable]
			private var chrColor:uint = color1;
			
			[Bindable]
			private var atts:ArrayList;
						
			private function initializeApp():void {
				this.move(400, 50);
				
				//Construct operation tree 
				var operationList:XMLList = opDef.opSet;
				var str:String = "<opList>";
				var m:int = operationList.length();
				for (var i:int = 0; i < m; i++) {
					var opset:XML = operationList[i];
					str += '<opSet label="' + opset.@setName + '">';
					var ops:XMLList = opset.children();
					var n:int = ops.length();
					for (var j:int = 0; j < n; j++) {
						var op:XML = ops[j];
						str += '<op label="' + op.@opeName + '"/>';
					}
					str += '</opSet>';
				}
				str += '</opList>';
				
				operationDef = XML(str).opSet;
				
				if (faSelection) {
					// feature type is selected. add inherited attributes
					attsSetting(featureType.attributeTypes);
					if (featureType.parent != null) inheritAttributes(featureType.parent);
					
					selectedOperations = featureType.operationTypes;
					faTypeArray = new ArrayList();
					faTypeArray.addItem(featureType);
					typeNameList.prompt = featureType.name;
					
					selfToTypeGroup.visible = true;
					fSelfRadio.selected = true;
					fromSelfToTypeGroup.visible = false;
				}
				else {
					// association type is selected.
					attsSetting(associationType.attributeTypes);
					selectedOperations = associationType.operationTypes;
					selfToTypeGroup.visible = false;
					aSelfRadio.selected = true;
					
					fromSelfToTypeGroup.visible = true;
					var faTypeName:String = associationType.name;
					faTypeArray = new ArrayList();
					faTypeArray.addItem(associationType);
					typeNameList.prompt = associationType.name;
				}
				
				roleTitle.visible     = false;
				roleNameLabel.visible = false;
				multiLabel.visible 　　= false;
			}
		
			protected function operationTree_clickHandler(event:ListEvent):void
			{
				opType = new OperationType();
				
				var selectedNode:XML = Tree(event.target).selectedItem as XML;
				if (selectedNode.children().length() == 0) {
					var opSetName:String = selectedNode.parent().@label;
					var operationName:String = selectedNode.@label;
					
					var opSets:XMLList = opDef.children();
					for (var i:int = 0; i < opSets.length(); i++) {
						var ops:XMLList = opSets[i].children();
						opType.type = opSets[i].@setName;
						if (opType.type == opSetName) {
							for (var j:int = 0; j < ops.length(); j++) {
								if (operationName == ops[j].@opeName.toXMLString()) {
									opType.name = operationName;
									opType.returnAttributeType = ops[j].@returnAttributeType.toXMLString();
									selectedOperations.addItem(opType);
									operationGrid.selectedIndex = selectedOperations.length - 1;
									var args:XMLList = ops[j].children();
									argumentsArray = new ArrayList();
									for (var k:int = 0; k < args.length(); k++) {
										var arg:AttributeType = new AttributeType();
										arg.name = args[k].@argName.toXMLString();
										arg.dataType = args[k].@dataType.toXMLString();
										var b:String = args[k].@multiplicity.toXMLString();
										arg.multiplicity = (b == "true") ? true : false;
										argumentsArray.addItem(arg);
									}
									
									argumentsArray = null;
									argAttArray.removeAll();
									returnTypeLabel.text = "";
									returnAttributeLabel.text = "";
									
									operationGrid.selectedIndex = -1;

									return;
								}
							}
						}
					}
				}
			}
			
			protected function selectedOperations_clickHandler(event:MouseEvent):void {
				
				if (operationGrid.selectedIndex == -1) {
					Alert.show("Select the operation on the provided operaton list.", "Waring", 4, this);
					return;
				}
				
				opType = selectedOperations.getItemAt(operationGrid.selectedIndex) as OperationType;
				var n:int = opDef.opSet.length();
				for (var i:int = 0; i < n; i++) {
					var ops:XMLList = opDef.opSet[i].child("operation");
					for (var j:int = 0; j < ops.length(); j++) {
						if (opType.name == ops[j].@opeName) {
							var args:XMLList = ops[j].children();
							argumentsArray = new ArrayList();
							for (var k:int = 0; k < args.length(); k++) {
								var arg:AttributeType = new AttributeType();
								arg.name = args[k].@argName.toXMLString();
								arg.dataType = args[k].@dataType.toXMLString();
								var b:String = args[k].@multiplicity.toXMLString();
								arg.multiplicity = (b == "true") ? true : false;
								argumentsArray.addItem(arg);
							}
							break;
						}
					}
				}
				argAttArray = new ArrayList();
				n = opType.arguments.length;
				for (i = 0; i < n; i++) {
					var argAttPair:ArgAttPair = opType.arguments.getItemAt(i) as ArgAttPair;
					var argAttNamePair:Object = new Object();
					argAttNamePair.argumentName = argAttPair.argumentType.name;
					argAttNamePair.fromTo = argAttPair.fromTo;
					argAttNamePair.attributeName = argAttPair.attributeType.name;
					if (argAttPair.targetTypeName != null)
						argAttNamePair.targetTypeName = argAttPair.targetTypeName;
					argAttArray.addItem(argAttNamePair);
				}
				
				returnTypeLabel.text = opType.returnAttributeType;
				returnAttributeLabel.text = opType.returnAttributeName;
				faTypeNameLabel.text = opType.returnFATypeName;

			}

			protected function deleteOperation_clickHandler(event:MouseEvent):void
			{
				var index:int = operationGrid.selectedIndex;
				selectedOperations.removeItemAt(index);
				argumentsArray = null;
				argAttArray.removeAll();
				returnTypeLabel.text = "";
				returnAttributeLabel.text = "";
				
			}


			protected function setReturnAttributeButton_clickHandler(event:MouseEvent):void
			{
				try {
					var at:AttributeType = attributeGrid.selectedItem as AttributeType;
					if (at == null) {
						Alert.show("Return type shall be selected before.", "Alert", 4, this);
						return;	
					}
				} catch (error:Error) {
					Alert.show("Return type shall be selected before.", "Alert", 4, this);
					return;						
				}
				
				if (at.derived == "") {
					Alert.show("Return type shall be derived.", "Alert", 4, this);
					return;					
				}
				
				if (returnTypeLabel.text  != at.dataType) {
					Alert.show("Return type conflict", "Alert", 4, this);
					return;
				}
				
				opType.returnAttributeName = returnAttributeLabel.text = at.name;
				
				if (faSelection) { //feature
					if (fSelfRadio.selected)
						opType.returnFATypeName = featureType.name;
					else if (fToRadio.selected)
						opType.returnFATypeName = linkAssoType.to.name;
				}
				else {  // association
					if (aSelfRadio.selected)
						opType.returnFATypeName = associationType.name;
					else if (aFromRadio.selected)
						opType.returnFATypeName = associationType.from.name;
					else if (aToRadio.selected)
						opType.returnFATypeName = associationType.to.name;
				}
				faTypeNameLabel.text = opType.returnFATypeName;
			}


			protected function addAttArgPair_clickHandler(event:MouseEvent):void
			{
				if (attributeGrid.selectedItem.dataType == argumentGrid.selectedItem.dataType)  {
					var argAttPair:ArgAttPair = new ArgAttPair();
					
					argAttPair.fromTo = "self";
					
					if (fToRadio.selected) {
						argAttPair.fromTo = "to";
						if (typeNameList.selectedIndex == -1) typeNameList.selectedIndex = 0;
						var toFType:FeatureType = faTypeArray.getItemAt(typeNameList.selectedIndex) as FeatureType;
						argAttPair.targetTypeName = toFType.name;
					}
					
					if (aFromRadio.selected) argAttPair.fromTo = "from";
					if (aToRadio.selected)   argAttPair.fromTo = "to";
					
					argAttPair.attributeType 	= attributeGrid.selectedItem as AttributeType;
					argAttPair.argumentType  	= argumentGrid.selectedItem as AttributeType;
					opType.arguments.addItem(argAttPair);
					
					// for display on the table
					var argAttNamePair:Object = new Object();
					argAttNamePair.argumentName  = argAttPair.argumentType.name as String;
					argAttNamePair.fromTo = argAttPair.fromTo as String;
					argAttNamePair.attributeName = argAttPair.attributeType.name as String;
					if (argAttPair.targetTypeName != null)
						argAttNamePair.targetTypeName = argAttPair.targetTypeName as String;
					argAttArray.addItem(argAttNamePair);				
				}
				else
					Alert.show("Data type conflict", "Alert", 4, this);
			}


			protected function deleteAttArgPair_clickHandler(event:MouseEvent):void
			{
				opType.arguments.removeItemAt(argAttGrid.selectedIndex);	
				argAttArray.removeItemAt(argAttGrid.selectedIndex);	
			}


			protected function aSelfRadio_clickHandler(event:MouseEvent):void
			{
				roleTitle.visible     = false;
				roleNameLabel.visible = false;
				multiLabel.visible = false;
				
				faTypeArray = new ArrayList();
				faTypeArray.addItem(associationType);
				typeNameList.prompt = associationType.name;
				
				attsSetting(associationType.attributeTypes);

			}
			
			protected function attsSetting(attTypes:ArrayList):void {
				atts = new ArrayList();
				for (var i:int = 0; i < attTypes.length; i++) {
					var attType:AttributeType = attTypes.getItemAt(i) as AttributeType;
					atts.addItem(attType);
				}
			}

			protected function aFromRadio_clickHandler(event:MouseEvent):void
			{
				roleTitle.visible     = false;
				roleNameLabel.visible = false;
				
				attsSetting(associationType.from.attributeTypes);
				
				//Collect attrubute and operation types
				if (associationType.from.parent != null) inheritAttributes(associationType.from.parent);

				//fromToFeatureType = associationType.from;
				
				faTypeArray = new ArrayList();
				faTypeArray.addItem(associationType.from);
				typeNameList.prompt = associationType.from.name;
				
				multiLabel.visible = (associationType.correspondence.search("m") > -1) ? true : false;

			}


			protected function aToRadio_clickHandler(event:MouseEvent):void
			{
				attsSetting(associationType.to.attributeTypes);
			
				//Collect attrubute and operation types
				if (associationType.to.parent != null) inheritAttributes(associationType.to.parent);
					
				//fromToFeatureType = associationType.to; 
				
				faTypeArray = new ArrayList();
				faTypeArray.addItem(associationType.to);
				typeNameList.prompt = associationType.to.name;
				
				roleTitle.visible = true;
				roleNameLabel.visible = true;
				roleNameLabel.text = associationType.roleName;
				
				multiLabel.visible = (associationType.correspondence.search("n") > -1) ? true : false;
				
			}
			
			private function inheritAttributes(feType:FeatureType):void {
				atts.addAll(feType.attributeTypes);
				
				if (feType.parent != null) inheritAttributes(feType.parent);
			}

			protected function fSelfRadio_clickHandler(event:MouseEvent):void
			{
				roleTitle.visible     = false;
				roleNameLabel.visible = false;
				multiLabel.visible = false;

				faTypeArray = new ArrayList();
				faTypeArray.addItem(featureType);
				
				typeNameList.prompt = featureType.name;
				
				attsSetting(featureType.attributeTypes);
				if (featureType.parent != null) inheritAttributes(featureType.parent);
			}
			
			protected function fToRadio_clickHandler(event:MouseEvent):void
			{
				if (featureType.links.length == 0) {
					fSelfRadio.selected = true;
					fToRadio.selected = false;
					return;
				}
				
				roleTitle.visible     = true;
				roleNameLabel.visible = true;
				
				//toTypes
				faTypeArray = new ArrayList();
				var m:int = featureType.links.length;
				for (var i:int = 0; i < m; i++) {
					linkAssoType = featureType.links.getItemAt(i) as AssociationType;
					faTypeArray.addItem(linkAssoType.to);
				}
				
				var toFType:FeatureType = faTypeArray.getItemAt(0) as FeatureType;
				typeNameList.prompt = toFType.name;
				
				attsSetting(toFType.attributeTypes);				
				if (toFType.parent != null) inheritAttributes(toFType.parent);
				
				linkAssoType = featureType.links.getItemAt(0) as AssociationType;
				
				roleNameLabel.text = linkAssoType.roleName;
				if (linkAssoType.correspondence.search("n") > -1)
					multiLabel.visible = true;	
				else
					multiLabel.visible = false;						
			}
		
			protected function typeNameList_changeHandler(event:IndexChangeEvent):void
			{
				var index:int = typeNameList.selectedIndex;
				if (index == -1) return;
				
				if (fSelfRadio.selected) {
					attsSetting(featureType.attributeTypes);
					if (featureType.parent != null) inheritAttributes(featureType.parent);
					
					selectedOperations = featureType.operationTypes;
				}
				
				if (fToRadio.selected) {
					var toFType:FeatureType = faTypeArray.getItemAt(index) as FeatureType; 
					
					attsSetting(toFType.attributeTypes);
					if (toFType.parent != null) inheritAttributes(toFType.parent);
					
					selectedOperations = featureType.operationTypes;
					
					linkAssoType = featureType.links.getItemAt(index) as AssociationType;
				
					roleTitle.visible = true;
					roleNameLabel.visible = true;
					roleNameLabel.text = linkAssoType.roleName;
					if (linkAssoType.correspondence.search("n") > -1)
						multiLabel.visible = true;	
					else
						multiLabel.visible = false;
				}
				
				if (aSelfRadio.selected) {
					attsSetting(associationType.attributeTypes);

					selectedOperations = associationType.operationTypes;
				}
				
				if (aToRadio.selected) {
					attsSetting(associationType.to.attributeTypes);
					if (associationType.to.parent != null) inheritAttributes(associationType.to.parent);					
					selectedOperations = associationType.operationTypes;
					
					faTypeArray = new ArrayList();
					faTypeArray.addItem(associationType.to);
					typeNameList.prompt = associationType.to.name;
				}
				
				if (aFromRadio.selected) {
					attsSetting(associationType.from.attributeTypes);
					if (associationType.from.parent != null) inheritAttributes(associationType.from.parent);					
					selectedOperations = associationType.operationTypes;
					
					faTypeArray = new ArrayList();
					faTypeArray.addItem(associationType.from);
					typeNameList.prompt = associationType.from.name;

				}
				
			}
			
			// Text and instruction  Controls
			protected function text_jp_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/jp/operationTypeDesigner_jp.html");
				navigateToURL(request);
			}
			
			protected function text_en_clickHandler(event:MouseEvent):void
			{
				var request:URLRequest = new URLRequest("documents/en/operationTypeDesigner_en.html");
				navigateToURL(request);
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Program API list for operation types -->
		<fx:XML id="opDef" source="texts/operations.xml"/>
		
		<s:RadioButtonGroup id="featureTypeSelection"/>
	</fx:Declarations>

	<s:Label x="467" y="17" text="日本語" fontFamily="Osaka" color="#969696" fontSize="11"
			 buttonMode="true" click="text_jp_clickHandler(event)"/>
	<s:Label x="508" y="19" text="English" color="#969696"
			 buttonMode="true" click="text_en_clickHandler(event)"/>

	<s:Image x="10" y="10" source="@Embed('images/pictModeling1.png')" width="60" height="60"/>
	<s:Label x="75" y="16" text="Operation Type Designer" fontSize="16"/>

	<s:Label x="40" y="298" text="selected operations" width="109" height="15" verticalAlign="middle"/>
	<mx:DataGrid x="40" y="317" width="188" id="operationGrid" contentBackgroundColor="#DADADA" 
			borderColor="#010101"
			height="104"
			click="selectedOperations_clickHandler(event)"
			dataProvider="{selectedOperations}">
		<mx:columns>
			<mx:DataGridColumn headerText="type" dataField="type" width="50"/>
			<mx:DataGridColumn headerText="op.name" dataField="name" width="60"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:DataGrid x="268" y="317" width="279" height="129" id="argumentGrid" dataProvider="{argumentsArray}">
		<mx:columns>
			<mx:DataGridColumn headerText="name" dataField="name" width="110"/>
			<mx:DataGridColumn headerText="data type" dataField="dataType" width="110"/>
			<mx:DataGridColumn headerText="multi." dataField="multiplicity" width="40"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:DataGrid id="argAttGrid" x="269" y="501" width="278" height="130" borderColor="#EEEEEE"
				 borderVisible="true" chromeColor="#AAAAAA" contentBackgroundColor="#FFFFFF"
				 dataProvider="{argAttArray}" variableRowHeight="true">
		<mx:columns>
			<mx:DataGridColumn headerText="argument" dataField="argumentName" width="110"/>
			<mx:DataGridColumn width="50" dataField="fromTo" headerText="f / s / t" resizable="false"/>
			<mx:DataGridColumn headerText="attributeType" dataField="attributeName" width="110"/>
		</mx:columns>
	</mx:DataGrid>
	
	<s:Label x="40" y="484" text="return attrbute type"/>
	<s:Label x="40" y="501" width="187" height="20" id="returnTypeLabel" backgroundColor="#DADADA" verticalAlign="middle"/>
	<s:Label x="268" y="301" text="arguments"/>
	<s:Label x="268" y="123" text="attribute types"/>
	<s:Label x="88" y="545" width="139" height="19" text="return attribute name"/>
	<s:Label x="40" y="564" width="187" height="20" backgroundColor="#DADADA" id="returnAttributeLabel" verticalAlign="middle"/>
	<s:Button x="40" y="539" label="set" width="43" id="setReturnAttributeButton" click="setReturnAttributeButton_clickHandler(event)"/>
	<s:Label x="396" y="478" text="argument attribute pair " width="148" height="11"/>
	<s:Button x="269" y="473" label="add" width="53" id="addAttArgPair" click="addAttArgPair_clickHandler(event)"/>
	<s:Button x="330" y="473" label="delete" width="56" id="deleteAttArgPair" click="deleteAttArgPair_clickHandler(event)"/>
	<s:Label x="40" y="121" text="provided operations"/>
	<mx:Tree x="40" y="138" width="189" id="operationTree" dataProvider="{operationDef}" labelField="@label" 
			 change="operationTree_clickHandler(event)"
			 contentBackgroundColor="#DADADA" height="132" borderColor="#dadada"/>
	
	<mx:DataGrid id="attributeGrid" x="267" y="139" width="280" height="130" variableRowHeight="true" dataProvider="{atts}">
		<mx:columns>
			<mx:DataGridColumn dataField="derived" headerText="dr" width="25"/>
			<mx:DataGridColumn headerText="name" dataField="name" width="100" />
			<mx:DataGridColumn headerText="data type" dataField="dataType" width="100"/>
			<mx:DataGridColumn headerText="multi." dataField="multiplicity" width="40"/>
		</mx:columns>
	</mx:DataGrid>
	
	<s:Button x="173" y="426" label="delete" id="deleteOperation" width="54" click="deleteOperation_clickHandler(event)"/>
	<s:Group id="selfToTypeGroup" x="0" y="6" visible="false">
		<s:RadioButton x="315" y="45" label="self" groupName="featureTypeSelection" id="fSelfRadio" click="fSelfRadio_clickHandler(event)"/>
		<s:RadioButton x="360" y="45" label="to" groupName="featureTypeSelection" id="fToRadio" click="fToRadio_clickHandler(event)"/>
	</s:Group>
	<s:Group id="fromSelfToTypeGroup" x="0" y="6" visible="false">
		<s:RadioButton x="266" y="45" label="from" groupName="featureTypeSelection" id="aFromRadio" click="aFromRadio_clickHandler(event)"/>
		<s:RadioButton x="315" y="45" label="self" groupName="featureTypeSelection" id="aSelfRadio" click="aSelfRadio_clickHandler(event)"/>
		<s:RadioButton x="360" y="45" label="to"   groupName="featureTypeSelection" id="aToRadio"   click="aToRadio_clickHandler(event)"/>
		<s:Label x="398" y="30" text="type name"/>
	</s:Group>
		
	<s:DropDownList id="typeNameList" x="398" y="50" width="148" height="20"
					change="typeNameList_changeHandler(event)" dataProvider="{faTypeArray}"
					labelField="name"></s:DropDownList>
	
	<s:Label id="roleTitle" x="397" y="83" text="role name"/>
	<s:Label id="roleNameLabel" x="397" y="97" width="148" height="20" backgroundColor="#DADADA"
				 verticalAlign="middle"/>
	<s:Label id="multiLabel" x="514" y="82" fontSize="13" text="multi"/>
	<s:Label x="40" y="596" fontSize="11" text="Feature/Association Type Name"/>
	<s:Label id="faTypeNameLabel" x="40" y="610" width="187" height="20" backgroundColor="#DADADA"
			 verticalAlign="middle"/>
</s:Window>
